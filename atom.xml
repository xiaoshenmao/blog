<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>向宇辉</title>
  <subtitle>久利之事勿为,众争之地勿往</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="//xiaoshenmao.github.io/blog/"/>
  <updated>2017-09-03T11:54:14.000Z</updated>
  <id>//xiaoshenmao.github.io/blog/</id>
  
  <author>
    <name>xiaoshenmao</name>
    <email>hello_sorrow@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随笔 回家的车票8.28-9.03</title>
    <link href="//xiaoshenmao.github.io/blog/2017/09/03/2017-09-03-homeTicket/"/>
    <id>//xiaoshenmao.github.io/blog/2017/09/03/2017-09-03-homeTicket/</id>
    <published>2017-09-03T03:20:58.000Z</published>
    <updated>2017-09-03T11:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年往返北京几次,没有一次终点站是家的。<br>列车路过武汉长江大桥,停靠在武汉站,万般不舍就想这样跳下车算了<br>什么需求,什么bug,都靠边站<br>念头持续了几秒,平静下来,笑笑自己。<br>“前方还有工作等着呢!” </p>
<a id="more"></a>
<p>记得上大学的时候,没有那么想家<br>即使不想家,一年也有三个月寒暑假是在家待的<br>有时候待的时间长,还会遭到父母的嫌弃<br>“怎么起那么晚呀? “<br>“有时间给你的房间拖拖地啊”<br>总是嫌父母啰嗦</p>
<p>而买的车票的目的的也都是武汉<br>终点站是家</p>
<p>而工作后,出差,车票的终点站就再也不是家了<br>偶尔路过武汉<br>感慨万千还是要继续赶路。<br>一年回去的日子缩短到短短的7天<br>和父母相聚到说话,除去睡觉时间<br>其实只有短短几个小时<br>再一出去,又是一年。</p>
<p>再也没有寒暑假<br>在外这么久,还是没有家的感觉<br>哪天不交房租,这间房主人就换了下一个。</p>
<p>这次还要感谢三华哥的婚礼<br>可以回一趟家了<br>回家一趟了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年往返北京几次,没有一次终点站是家的。&lt;br&gt;列车路过武汉长江大桥,停靠在武汉站,万般不舍就想这样跳下车算了&lt;br&gt;什么需求,什么bug,都靠边站&lt;br&gt;念头持续了几秒,平静下来,笑笑自己。&lt;br&gt;“前方还有工作等着呢!” &lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="//xiaoshenmao.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心情" scheme="//xiaoshenmao.github.io/blog/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>随笔 又记台风天8.21-8.27</title>
    <link href="//xiaoshenmao.github.io/blog/2017/08/23/2017-08-23TyphoonDay/"/>
    <id>//xiaoshenmao.github.io/blog/2017/08/23/2017-08-23TyphoonDay/</id>
    <published>2017-08-23T06:09:23.000Z</published>
    <updated>2017-08-26T06:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=423104390&auto=0&height=66"></iframe>

<p>23号,深圳刮台风了。<br>记得去年刚来到这个城市。<br>到处投简历的我,也是因为刮台风,而面试被推迟了。<br>对这个城市的印象都是伴随着台风。</p>
<p>我已经来到这个城市一年了。<br>当初大包小包的带着行李,乘车去广州。<br>父母的话还在耳边:在家不好吗,为什么要跑那么远?<br>是啊,为什么要跑那么远?</p>
<p>现在生活规律,生活静下来,觉得慢慢脱离了年轻。<br>也许慢慢变成熟了,我总成熟真是一个贬义词。<br>意味着青春已经走远,意味着凡事都需有可为,有可不为。<br>增加了太多了约束,是我不喜欢的。</p>
<p>当然也有好处。<br>当然包括当时不懂,后来顿悟了的。<br><a id="more"></a></p>
<hr>
<p>注意身体。<br>小时候妈妈不让我吃垃圾食品，告诉我注意身体。<br>初中高中在外寄宿，父母每次打电话来都是告诉我注意身体。</p>
<p>我一直很讨厌这句话，觉得苍白无力，觉得只是一种毫无意义的寒暄。<br>我会熬夜打游戏，会夜里吃无比油腻的食品,会不注意保暖。<br>注意身体这句话我都听得耳朵磨出了老茧，我一直没做。</p>
<p>但是当我真实的发现自己的胃痛时常发生，腰肩时常疼痛。<br>我才明白自己要为年轻不懂事付出多少代价。</p>
<p>从今年开始，再也不吃油炸食品了。<br>定期跑步和健身，每周一次的爬南山。<br>爬山坚持了4周,相信还会坚持下去。</p>
<p>吃完之后多去散步，我才发现，一直以来。<br>我对这个世界缺乏兴趣，不是因为我的抑郁，而是我那已经越发沉重的身体。<br>当我把注意身体当做一个很重要的部分是实践的时候，<br>才发觉自己的身和心都变轻了。</p>
<hr>
<p>注意卫生。<br>之前，我在知乎上看到一个回答，是如何提高幸福感。<br>她说叠被子。</p>
<p>我觉得有道理，从小学开始就被要求叠被子。<br>初中高中都是寄宿，每天都被要求叠被子。<br>到了大学之后没有了要求，再也不叠了。<br>自己一个人生活也是一样，只有偶尔回老家，父母监督下才会叠被子。</p>
<p>从我看到那个回答开始，我开始叠被子。<br>每天叠被子，发现自己真的在生活了。<br>之前每天都是看书写文章，无视了自己居住的环境，活的很虚无。</p>
<p>当发现自己在生活时，就能一点点看到自己的环境。<br>书放的很乱，需要整理，整理的时候感觉很麻烦。<br>所以以后书用完一定要放回原来的位置。</p>
<p>有些垃圾放在地上处理很麻烦，所以不会再乱认东西了。<br>这种仪式感消耗着我的时间，但是一样提高着我的幸福。<br>注意卫生，整理生活。<br>让我能感受到每天都是一个循环，再也不会今天和昨天一样。<br>每天都有盼头。<br>打扫卫生，叠被子，东西用完放回原处，真的可以提高幸福感。</p>
<p>成熟真是一个人的事情。<br>最近听到一首歌,歌词送给大家,也送给我自己。</p>
<blockquote>
<p>借我 - 谢春花<br>作词: 锦屏<br>借我十年<br>借我亡命天涯的勇敢<br>借我说得出口的旦旦誓言<br>借我孤绝如初见<br>借我不惧碾压的鲜活<br>借我生猛与莽撞不问明天<br>借我一束光照亮黯淡<br>借我笑颜灿烂如春天<br>借我杀死庸碌的情怀<br>借我纵容的悲怆与哭喊<br>借我怦然心动如往昔<br>借我安适的清晨与傍晚<br>静看光阴荏苒<br>借我喑哑无言<br>不管不顾不问不说 也不念<br>静看光阴荏苒</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=423104390&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;23号,深圳刮台风了。&lt;br&gt;记得去年刚来到这个城市。&lt;br&gt;到处投简历的我,也是因为刮台风,而面试被推迟了。&lt;br&gt;对这个城市的印象都是伴随着台风。&lt;/p&gt;
&lt;p&gt;我已经来到这个城市一年了。&lt;br&gt;当初大包小包的带着行李,乘车去广州。&lt;br&gt;父母的话还在耳边:在家不好吗,为什么要跑那么远?&lt;br&gt;是啊,为什么要跑那么远?&lt;/p&gt;
&lt;p&gt;现在生活规律,生活静下来,觉得慢慢脱离了年轻。&lt;br&gt;也许慢慢变成熟了,我总成熟真是一个贬义词。&lt;br&gt;意味着青春已经走远,意味着凡事都需有可为,有可不为。&lt;br&gt;增加了太多了约束,是我不喜欢的。&lt;/p&gt;
&lt;p&gt;当然也有好处。&lt;br&gt;当然包括当时不懂,后来顿悟了的。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="//xiaoshenmao.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心情" scheme="//xiaoshenmao.github.io/blog/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>hexo-个人博客的搭建</title>
    <link href="//xiaoshenmao.github.io/blog/2017/08/18/2017-08-18-hexoInitYourBlog/"/>
    <id>//xiaoshenmao.github.io/blog/2017/08/18/2017-08-18-hexoInitYourBlog/</id>
    <published>2017-08-18T06:38:39.000Z</published>
    <updated>2017-08-23T10:43:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　经过各种找资料，踩过各种坑，终于使用 hexo 搭建个人博客初步完成了，域名目前用得时 github 的，我的 hexo 是 3.1.1 版本，hexo 不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。     </p>
<p>　　本篇文章累计了大量评论，和我的一些解答，读者有什么问题可以先看看评论，或者搜下关键字，如果还是有问题可以给我在评论里给我留言，问题很着急的可以加我 ＱＱ：78233332　，或者给我发邮件：<a href="mailto:hello_sorrow@163.com" target="_blank" rel="external">hello_sorrow@163.com</a>  </p>
<a id="more"></a> 
<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>　这边教程是针对与Mac的，<a href="http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool" target="_blank" rel="external">参考链接</a>，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。</p>
<p>　之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。</p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="安装Node（必须）"><a href="#安装Node（必须）" class="headerlink" title="安装Node（必须）"></a>安装Node（必须）</h3><p>作用：用来生成静态页面的<br>到Node.js<a href="https://nodejs.org/" target="_blank" rel="external">官网</a>下载相应平台的最新版本，一路安装即可。</p>
<h3 id="安装Git（必须）"><a href="#安装Git（必须）" class="headerlink" title="安装Git（必须）"></a>安装Git（必须）</h3><p>作用：把本地的hexo内容提交到github上去.<br>安装Xcode就自带有Git，我就不多说了。</p>
<h3 id="申请GitHub（必须）"><a href="#申请GitHub（必须）" class="headerlink" title="申请GitHub（必须）"></a>申请GitHub（必须）</h3><p>作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。<br><a href="https://github.com/" target="_blank" rel="external">github</a>账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我的简书上<a href="http://www.jianshu.com/p/765d6d04b11f" target="_blank" rel="external">小神猫的简书</a>,是在MAC上配置的。</p>
<h3 id="正式安装HEXO"><a href="#正式安装HEXO" class="headerlink" title="正式安装HEXO　"></a>正式安装HEXO　</h3><p>Node和Git都安装好后，可执行如下命令安装hexo：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo npm install -g hexo</span></div></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> hexo init</span></div></pre></td></tr></table></figure>
<p>好啦，至此，全部安装工作已经完成！</p>
<h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><p>继续再Blog目录下执行如下命令，生成静态页面</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">generate</span> （hexo g  也可以）</div></pre></td></tr></table></figure>
<h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><p>启动本地服务，进行文章预览调试，命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> hexo server</span></div></pre></td></tr></table></figure>
<p>浏览器输入<a href="就可以看到最原始的效果了">http://localhost:4000</a><br>我不知道你们能不能，反正我不能，因为我还有环境没配置好</p>
<h3 id="常见的HEXO配置错误："><a href="#常见的HEXO配置错误：" class="headerlink" title="常见的HEXO配置错误："></a>常见的HEXO配置错误：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ERROR Plugin <span class="keyword">load</span> <span class="keyword">failed</span>: hexo-<span class="keyword">server</span></div><div class="line"></div><div class="line">原因： Besides, utilities <span class="keyword">are</span> separated <span class="keyword">into</span> a <span class="keyword">standalone</span> module. hexo.util <span class="keyword">is</span> <span class="keyword">not</span> reachable anymore.</div><div class="line"></div><div class="line">解决方法，执行命令：$ sudo npm <span class="keyword">install</span> hexo-<span class="keyword">server</span></div></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">执行命令hexo server，提示：Usage: hexo<span class="xml"><span class="tag">&lt;<span class="name">Command</span>&gt;</span></span> ....</div><div class="line"></div><div class="line">原因：我认为是没有生成本地服务</div><div class="line"></div><div class="line">解决方法，执行命令：$ npm install hexo-server --save</div><div class="line"></div><div class="line">提示：hexo-server@0.1.2 node_modules/hexo-server</div><div class="line">.... </div><div class="line"></div><div class="line">表示成功了[<span class="string">参考</span>](<span class="link">https://hexo.io/zh-cn/docs/server.html</span>)</div></pre></td></tr></table></figure>
<p>这个时候再执行：$ hexo-server</p>
<p>得到: <code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p>
<p>这个时候再点击<a href="http://0.0.0.0:4000" target="_blank" rel="external">http://0.0.0.0:4000</a>，正常情况下应该是最原始的画面，但是我看到的是：<br>白板和Cannot GET /   几个字<br>原因： 由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">npm install hexo-renderer-ejs --save</div><div class="line">npm install hexo-renderer-stylus --save</div><div class="line">npm install hexo-renderer-marked --save</div><div class="line"></div><div class="line">这个时候再重新生成静态文件，命令：</div><div class="line"></div><div class="line">hexo generate （或hexo g）</div><div class="line"></div><div class="line">启动本地服务器：</div><div class="line"></div><div class="line">hexo<span class="built_in"> server </span>（或hexo s）</div></pre></td></tr></table></figure>
<p>再点击网址<a href="http://0.0.0.0:4000" target="_blank" rel="external">http://0.0.0.0:4000</a> OK终于可以看到属于你自己的blog啦，虽然很简陋，但好歹有了一个属于自己的小窝了。<a href="https://disqus.com/home/discussion/bsspirit/hexogithubweb/" target="_blank" rel="external">参考链接</a>，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。</p>
<h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><h3 id="建立Repository"><a href="#建立Repository" class="headerlink" title="建立Repository"></a>建立Repository</h3><p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法<br>然后建立关联，我的Blog在本地/Users/leopard/Blog，Blog是我之前建的东西也全在这里面，有：</p>
<blockquote>
<p>Blog<br>　｜<br>　｜－－ _config.yml<br>　｜－－ node_modules<br>　｜－－ public<br>　｜－－ source<br>　｜－－ db.json<br>　｜－－ package.json<br>　｜－－ scaffolds<br>　｜－－ themes          　　　　　
　　　</p>
</blockquote>
<p>现在我们需要_config.yml文件，来建立关联，命令：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">vim</span> _<span class="selector-tag">config</span><span class="selector-class">.yml</span></div></pre></td></tr></table></figure>
<p>翻到最下面，改成我这样子的，注意： <code>: 后面要有空格</code></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">deploy:</span></div><div class="line"><span class="string">type:</span> git</div><div class="line"><span class="string">repository:</span> <span class="string">https:</span><span class="comment">//github.com/xiaoshenmao/xiaoshenmao.github.io.git</span></div><div class="line"><span class="string">branch:</span> master</div><div class="line"></div><div class="line">执行如下命令才能使用git部署</div><div class="line"></div><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。<br>忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。<br>然后，执行配置命令：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo deploy</span></div></pre></td></tr></table></figure>
<p>　然后再浏览器中输入<a href="http://xiaoshenmao.github.io/" target="_blank" rel="external">http://xiaoshenmao.github.io/</a>就行了，我的 github 的账户叫 xiaoshenmao ,把这个改成你 github 的账户名就行了</p>
<h3 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h3><p>每次部署的步骤，可按以下三步来进行。</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo <span class="keyword">generate</span></div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>一些常用命令：</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span> <span class="meta">#新建文章</span></div><div class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> <span class="meta">#新建页面</span></div><div class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></div><div class="line">hexo <span class="keyword">server</span> <span class="meta">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class="line">hexo deploy <span class="meta">#将.deploy目录部署到GitHub</span></div><div class="line">hexo help  <span class="meta">#查看帮助</span></div><div class="line">hexo version  <span class="meta">#查看Hexo的版本</span></div></pre></td></tr></table></figure>
<p>缩写：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo n == hexo new</div><div class="line">hexo g == hexo generate</div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div></pre></td></tr></table></figure>
<p>组合命令：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo</span> s -g <span class="comment">#生成并本地预览</span></div><div class="line">hexo d -g <span class="comment">#生成并上传</span></div></pre></td></tr></table></figure>
<p>这里有大量的<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">主题列表</a>使用方法里面<br>都有详细的介绍，我就不多说了。<br>我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，?<br>　<a href="https://github.com/daisygao/hexo-themes-cover" target="_blank" rel="external">Cover</a> - A chic theme with facebook-like cover photo<br>　<a href="https://github.com/henryhuang/oishi" target="_blank" rel="external">Oishi</a> - A white theme based on Landscape plus and Writing.<br>　<a href="https://github.com/hardywu/hexo-theme-sidebar" target="_blank" rel="external">Sidebar</a> - Another theme based on Light with a simple sidebar<br>　<a href="https://github.com/SuperKieran/TKL" target="_blank" rel="external">TKL</a> - A responsive design theme for Hexo. 一个设计优雅的响应式主题<br>　<a href="https://github.com/levonlin/Tinnypp" target="_blank" rel="external">Tinnypp</a> - A clean, simple theme based on Tinny<br>　<a href="https://github.com/yunlzheng/hexo-themes-writing" target="_blank" rel="external">Writing</a> - A small and simple hexo theme based on Light<br>　<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Yilia</a> - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。<br>　<a href="https://github.com/Voidly/pacman" target="_blank" rel="external">Pacman voidy</a> - A theme with dynamic tagcloud and dynamic snow      </p>
<h3 id="一些基本路径"><a href="#一些基本路径" class="headerlink" title="一些基本路径"></a>一些基本路径</h3><p>　文章在 source/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里，修改名字在 public/index.html 里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。</p>
<p>Markdown语法参考链接: <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">作业部落</a></p>
<h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><blockquote>
<p>问：如何让文章想只显示一部分和一个 <code>阅读全文</code> 的按钮？<br>答：在文章中加一个 <code>&lt;!--more--&gt;</code> ， <code>&lt;!--more--&gt;</code> 后面的内容就不会显示出来了。</p>
</blockquote>
<p> </p>

<blockquote>
<p>问：本地部署成功了，也能预览效果，但使用 username.github.io 访问，<code>出现 404</code> .<br>答：首先确认 hexo d 命令执行是否报错，如果没有报错，再查看一下你的 github 的 username.github.io 仓库，你的博客是否已经成功提交了，你的 github 邮箱也要通过验证才行。</p>
</blockquote>
<p> </p>

<p>转载请注明原地址，向宇辉的博客：<a href="http://xiaoshenmao.github.io" target="_blank" rel="external">http://xiaoshenmao.github.io</a> 谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　经过各种找资料，踩过各种坑，终于使用 hexo 搭建个人博客初步完成了，域名目前用得时 github 的，我的 hexo 是 3.1.1 版本，hexo 不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。     &lt;/p&gt;
&lt;p&gt;　　本篇文章累计了大量评论，和我的一些解答，读者有什么问题可以先看看评论，或者搜下关键字，如果还是有问题可以给我在评论里给我留言，问题很着急的可以加我 ＱＱ：78233332　，或者给我发邮件：&lt;a href=&quot;mailto:hello_sorrow@163.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hello_sorrow@163.com&lt;/a&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="//xiaoshenmao.github.io/blog/tags/hexo/"/>
    
      <category term="blog" scheme="//xiaoshenmao.github.io/blog/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Wifi 定位原理及 iOS Wifi 列表获取</title>
    <link href="//xiaoshenmao.github.io/blog/2017/01/03/2017-01-03-iOS_Wifilist/"/>
    <id>//xiaoshenmao.github.io/blog/2017/01/03/2017-01-03-iOS_Wifilist/</id>
    <published>2017-01-02T16:00:00.000Z</published>
    <updated>2017-08-22T16:54:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　对于大家来说，Wifi 应该是一个很熟悉的词了，我们每天都可能在使用 Wifi 热点。Wifi 除了能给我们提供热点之外同时还有定位的作用， 现在移动设备的对用户的隐私保护是越来越严格了，就如定位功能，必须要经过设备用户的授权才能使用 Location 给这台设备定位。这些严格的隐私政策对用户起到到保护作用，但对开发人员却是一种阻碍，在产品强需求的情况下用户是会授权的，如地图类应用，但是另外一些没有对定位强需求的产品，用户可能就不会给你授权了，这是我们可以考虑下 Wifi 定位了。</p>
<h3 id="Wifi-定位原理"><a href="#Wifi-定位原理" class="headerlink" title="Wifi 定位原理"></a>Wifi 定位原理</h3><p>　　当我们使用手机扫面 Wifi 的时候，其实就可以定位到这台手机的位置信息了。每个 Wifi 路由开启后，都会不停的往四周发射信号，我们把 Wifi 路由想象成太阳以某种频度不停的往周围发射电磁波，电磁波会因距离的削弱，同时也会因为物体阻挡而削弱。例子就是我们在离 Wifi 路由器同样远的位置，有些地方信号强度高有些地方信号强度低。路由同时也叫 Wifi 热点（或者 Wifi AP：Access Point）。每一个 Wifi 路由器都会有一个 BSSID，很多人都管这个 BSSID 叫 MAC 地址（其实 BSSID 并不是 MAC 地址），BSSID 设定了一般就不会在变也不会重复，也就意味着是全球唯一的，这是路由制造的规则，既然有规则那么就会有不遵守规则的人，文章结尾会介绍不遵守规则的人是如何害人害己的。<br><a id="more"></a><br>　　刚才提到的 BSSID，在 Wifi 路由器的发射中是可以检测到的，同时 Wifi 路由信号还伴随着，SSID(路由器的名称：如XX的Wifi)、signalStrength（手机接收到Wifi的信号强度）及其它信息。看到这里你应该知道如何使用Wifi定位的了，条件：唯一不变的BSSID 和 手机到路由器的信号强度。思路：Wifi 信号是有范围的，我们假设这个范围就是10米为半径的一个圆(实际情况根据Wifi路由厂商和路由器周围环境而定)，我们去采集一些Wifi热点回来，某家水果店的 Wifi、某家餐馆的 Wifi 等等，我们自己去采集的我们肯定知道他们的具体位置，及刚才提到的 Wifi 中的信息：BSSID、SSID、signalStrength，再把他们存入数据库，采集的人可以很多：专业采集人员、出租车司机、快递员等等，他们经常穿梭于大街小巷，其实我们每个人都是Wifi数据库的采集人员，我们的手机厂商每天都在默默的采集着我们的位置信息，iPhone手机系统设置里就可以看到你今天去哪了，你的Wifi连接过哪些设备也是知道的。时间越久Wifi数据库信息越丰富，最终会发现每个BSSID会对应多个SSID和signalStrength，因为SSID是可以修改的，signalStrength是由于在这个Wifi热点的周围不同位置采集的，所以信号强度也不同。采集的信号强度越多，给BSSID也就是这个Wifi热点的定位就越精准。</p>
<p>　　现在如果我去一个陌生的地方，我打开手机扫描周围的 Wifi 刚好扫描到了一个或几个，我把这个 Wifi 信息（BSSID）传给服务器，服务器通过这个 BSSID 去数据库查找，就能直接匹配到对应的位置，返回给我。如果匹配不到则表示这里没人来采集过 Wifi 信息，或者是这个 Wifi 热点是最近布置的，采集人员还没来得及采集。服务器可以把这些未采集到的先分类后期统一规划。</p>
<p>　　Wifi 定位整体功能是需要服务端来配合的，也就表示必须要有网络环境才行。其实移动端(手机、Pad等)也可以独立完成，不过对技术和设备硬件要求会高很多，全球的 Wifi 热点是一个很庞大的数据量，需要经过高精度的无损压缩后放在内存很大的手机里才行，或许多年以后可以实现吧(即使技术上能实现了，对于产品和研发来说收益、风险、和工作量又是一场PK)</p>
<h3 id="iOS-申请获取-Wifi-列表权限"><a href="#iOS-申请获取-Wifi-列表权限" class="headerlink" title="iOS 申请获取 Wifi 列表权限"></a>iOS 申请获取 Wifi 列表权限</h3><p>　　知道了原理有啥用呢，能实现么？好吧现在就遇到问题了，移动设备如今主要是 Andorid 和 iOS, Android 上可以直接扫描 Wifi 列表获取相关信息，自己去网上找找, 所以说会原理不一定会技术实现，我也就只能讲讲 iOS 的技术实现了。<br>　　iOS 上获取 Wifi 列表其实也有很大限制，在 iOS 9 以前是不能获取Wifi列表的，只能获取当前连接的 Wifi 信息，也就表示只有连接了 Wifi 才能定位，刚才文章说到的场景是，我在一个陌生的原理，拿出手机扫描 Wifi ，也就是我并没连接那里的 Wifi（我不知道密码我怎么连啊）。Apple 在 iOS 9 以后，提供了获取Wifi列表的API，但是获取Wifi列表是有门槛的，主要步骤有：</p>
<blockquote>
<ul>
<li>1、向 Apple 申请开发 Network Extension 权限</li>
<li>2、申请包含 Network Extension 的描述文件</li>
<li>3、配置 Info.plist </li>
<li>4、配置 entitlements</li>
<li>5、iOS 获取 Wifi 列表代码实现</li>
<li>6、获取Wifi列表回调</li>
</ul>
</blockquote>
<h3 id="1、向-Apple-申请开发-Network-Extension-权限"><a href="#1、向-Apple-申请开发-Network-Extension-权限" class="headerlink" title="1、向 Apple 申请开发 Network Extension 权限"></a>1、向 Apple 申请开发 Network Extension 权限</h3><p>　　首先要先写封邮件给 <a href="mailto:networkextension@apple.com" target="_blank" rel="external">networkextension@apple.com</a> ，问苹果要开发 Network Extension 的权限。<br>苹果收到邮件后会自动回复邮件，在 <a href="https://developer.apple.com/contact/network-extension/" target="_blank" rel="external">https://developer.apple.com/contact/network-extension/</a> 里面填写申请表格，内容包括：     </p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Organization：               </div><div class="line"></div><div class="line">Company / Product URL:             </div><div class="line"></div><div class="line">What<span class="symbol">'s</span> your product<span class="symbol">'s</span> target market?              </div><div class="line"></div><div class="line">What<span class="symbol">'s</span> your company<span class="symbol">'s</span> primary <span class="keyword">function</span>?             </div><div class="line"></div><div class="line">Describe your application <span class="keyword">and</span> how it will <span class="keyword">use</span> the Network Extension framework.            </div><div class="line"></div><div class="line">What <span class="keyword">type</span> <span class="type">of </span>entitlement are you requesting?                     </div><div class="line"></div><div class="line">。。。</div></pre></td></tr></table></figure>
<p>申请后大概两周左右能收到 Aplle的 确认信，如：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Hi, </div><div class="line"></div><div class="line">Thanks <span class="keyword">for</span> your interest <span class="keyword">in</span> the<span class="built_in"> Network </span>Extension APIs.</div><div class="line"></div><div class="line">We added a new template containing the<span class="built_in"> Network </span>Extension entitlements <span class="keyword">to</span> your team.</div><div class="line"></div><div class="line">。。。。</div></pre></td></tr></table></figure>
<h3 id="2、申请包含-Network-Extension-的描述文件"><a href="#2、申请包含-Network-Extension-的描述文件" class="headerlink" title="2、申请包含 Network Extension 的描述文件"></a>2、申请包含 Network Extension 的描述文件</h3><p><img src="/blog/assets/posts/Wifilist/PastedGraphic.png" alt=""></p>
<p>选择包含 Network Extension 的描述文件，后点击下载，下载完成双击描述文件。</p>
<h3 id="3、配置-Info-plist"><a href="#3、配置-Info-plist" class="headerlink" title="3、配置 Info.plist"></a>3、配置 Info.plist</h3><p>Xcode Info.plist 里 Required background modes 添加 一个 network-authentication(item)</p>
<p><img src="/blog/assets/posts/Wifilist/infoplist.png" alt=""></p>
<h3 id="4、配置-entitlements"><a href="#4、配置-entitlements" class="headerlink" title="4、配置 entitlements"></a>4、配置 entitlements</h3><p>Demo.entitlements（Demo是项目名称） 里添加 Key-Value: com.apple.developer.networking.HotspotHelper -&gt; YES</p>
<p><img src="/blog/assets/posts/Wifilist/entitlement.png" alt=""></p>
<h3 id="5、iOS-获取-Wifi-列表代码实现"><a href="#5、iOS-获取-Wifi-列表代码实现" class="headerlink" title="5、iOS 获取 Wifi 列表代码实现"></a>5、iOS 获取 Wifi 列表代码实现</h3><p>导入头文件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;NetworkExtension/NetworkExtension.h&gt;</span></span></div></pre></td></tr></table></figure>
<p>代码实现</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (void)getWifiList &#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (![[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 9.0) &#123;return;&#125;</div><div class="line">	dispatch_queue_t<span class="built_in"> queue </span>= dispatch_queue_create(<span class="string">"com.leopardpan.HotspotHelper"</span>, 0);</div><div class="line">	[NEHotspotHelper registerWithOptions:nil queue:queue handler: ^(NEHotspotHelperCommand * cmd) &#123;</div><div class="line">		<span class="keyword">if</span>(cmd.commandType == kNEHotspotHelperCommandTypeFilterScanList) &#123;</div><div class="line">			<span class="keyword">for</span> (NEHotspotNetwork*<span class="built_in"> network </span> <span class="keyword">in</span> cmd.networkList) &#123;</div><div class="line">				NSLog(@<span class="string">"network.SSID = %@"</span>,network.SSID);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>kNEHotspotHelperCommandTypeFilterScanList： 表示扫描到 Wifi 列表信息。</p>
<p>NEHotspotNetwork 里有如下信息：</p>
<blockquote>
<ul>
<li>SSID：Wifi 名称 </li>
<li>BSSID：站点的 MAC 地址</li>
<li>signalStrength： Wifi信号强度，该值在0.0-1.0之间     </li>
<li>secure：网络是否安全 (不需要密码的 Wifi，该值为 false)</li>
<li>autoJoined： 设备是否自动连接该 Wifi，目前测试自动连接以前连过的 Wifi 的也为 false 。</li>
<li>justJoined：网络是否刚刚加入</li>
<li>chosenHelper：HotspotHelper是否为网络的所选助手</li>
</ul>
</blockquote>
<p><a href="https://developer.apple.com/reference/networkextension/nehotspotnetwork" target="_blank" rel="external">官方文档连接</a></p>
<h3 id="6、获取Wifi列表回调"><a href="#6、获取Wifi列表回调" class="headerlink" title="6、获取Wifi列表回调"></a>6、获取Wifi列表回调</h3><p>当你把上面的代码写完，并成功运行项目后，发现并没有Wifi列表的回调。因为你还没刷新Wifi列表，你需要：</p>
<ul>
<li>打开手机系统设置 -&gt; WLAN -&gt; 系统 Wifi 列表加载出来时，上面代码部分才会回调，才能获取到 Wifi 列表。</li>
</ul>
<p><img src="/blog/assets/posts/Wifilist/WLAN.png" height="360" width="200">  </p>
<p>这个时候你就能看到控制台源源不断的Log。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>1、获取Wifi列表功能由于是需要申请后台权限，所以能后台激活App(应用程序)，而且激活后App的进程能存活几个小时。</li>
<li>2、整个获取Wifi列表不需要App用户授权，也就是在App用户无感知下获取设备的Wifi列表信息，使用时请正当使用。</li>
<li>3、Wifi列表获取 NetworkExtension 是 iOS 9以后才出的，目前 iOS 9 已经覆盖很广了。</li>
</ul>
<p>下面付一张来自 <a href="https://www.talkingdata.com/index/#/device/os/zh_CN" target="_blank" rel="external">TalkingData 对iOS操作系统的统计报表</a>，时间：2017-01-03</p>
<p><img src="/blog/assets/posts/Wifilist/systemVersion.png" height="280" width="600">  </p>
<h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>在操作过程或者文章有问题的话欢迎在 <a href="http://baixin.io/2017/01/iOS_Wifilist/" target="_blank" rel="external">原文</a> 里提问或指正。</p>
<blockquote>
<ul>
<li>使用 Demo 我就不提供了，你如果没有申请 NetworkExtension 权限，提供了 Demo 你也无法使用。</li>
</ul>
</blockquote>
<p><br></p>
<p>参考资源：<a href="http://stackoverflow.com/questions/31704292/nehotspothelper-networkextension-api-ios9-0" target="_blank" rel="external">NEHotspotHelper NetworkExtension API iOS9.0</a></p>
<p><br><br>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2017/01/03/2017-01-03-iOS_Wifilist/" target="_blank" rel="external">Wifi 定位原理及 iOS Wifi 列表获取</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　对于大家来说，Wifi 应该是一个很熟悉的词了，我们每天都可能在使用 Wifi 热点。Wifi 除了能给我们提供热点之外同时还有定位的作用， 现在移动设备的对用户的隐私保护是越来越严格了，就如定位功能，必须要经过设备用户的授权才能使用 Location 给这台设备定位。这些严格的隐私政策对用户起到到保护作用，但对开发人员却是一种阻碍，在产品强需求的情况下用户是会授权的，如地图类应用，但是另外一些没有对定位强需求的产品，用户可能就不会给你授权了，这是我们可以考虑下 Wifi 定位了。&lt;/p&gt;
&lt;h3 id=&quot;Wifi-定位原理&quot;&gt;&lt;a href=&quot;#Wifi-定位原理&quot; class=&quot;headerlink&quot; title=&quot;Wifi 定位原理&quot;&gt;&lt;/a&gt;Wifi 定位原理&lt;/h3&gt;&lt;p&gt;　　当我们使用手机扫面 Wifi 的时候，其实就可以定位到这台手机的位置信息了。每个 Wifi 路由开启后，都会不停的往四周发射信号，我们把 Wifi 路由想象成太阳以某种频度不停的往周围发射电磁波，电磁波会因距离的削弱，同时也会因为物体阻挡而削弱。例子就是我们在离 Wifi 路由器同样远的位置，有些地方信号强度高有些地方信号强度低。路由同时也叫 Wifi 热点（或者 Wifi AP：Access Point）。每一个 Wifi 路由器都会有一个 BSSID，很多人都管这个 BSSID 叫 MAC 地址（其实 BSSID 并不是 MAC 地址），BSSID 设定了一般就不会在变也不会重复，也就意味着是全球唯一的，这是路由制造的规则，既然有规则那么就会有不遵守规则的人，文章结尾会介绍不遵守规则的人是如何害人害己的。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="//xiaoshenmao.github.io/blog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发中的小问题记录</title>
    <link href="//xiaoshenmao.github.io/blog/2016/12/02/2016-12-02-iOS_Dev_Note/"/>
    <id>//xiaoshenmao.github.io/blog/2016/12/02/2016-12-02-iOS_Dev_Note/</id>
    <published>2016-12-01T16:00:00.000Z</published>
    <updated>2017-08-22T16:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NSKeyedArchiver-自定义对象写文件"><a href="#NSKeyedArchiver-自定义对象写文件" class="headerlink" title="NSKeyedArchiver 自定义对象写文件"></a>NSKeyedArchiver 自定义对象写文件</h3><p>如果存储的对象类名有变动，则需要设置clasName, 方法为：“setClassName:forClass:”<br>使用 NSKeyedArchiver 进行数据持久化时, 系统会默认使用类名去建表，如果类名变了，那么使用新的类名肯定是从本地获取不到表的，代码执行崩溃。<br>所以需要在 NSKeyedArchiver 或者 NSKeyedUnarchiver 时使用 “setClassName:forClass:” 指定类名。 </p>
<h3 id="断点配置：【Generate-Debug-Symbols】"><a href="#断点配置：【Generate-Debug-Symbols】" class="headerlink" title="断点配置：【Generate Debug Symbols】"></a>断点配置：【Generate Debug Symbols】</h3><p>描述: 用来控制断点是否生效,关闭此功能，打包 <code>.ipa</code> 时，包体积会小很多。<br>配置路径:【project/TARGETS/Build Settings/Apple LLVM7.1 - Code Genneration/Generate Debug Symbols】    </p>
<h3 id="捕获全局异常：【All-Exception】"><a href="#捕获全局异常：【All-Exception】" class="headerlink" title="捕获全局异常：【All Exception】"></a>捕获全局异常：【All Exception】</h3><p>描述: 用来捕捉整个项目在 Xcode 里执行时的异常。例如：try/catch 时 catch住的异常,【All Exception】可以直接定位到具体位置。<br>配置路径: 异常捕捉(commod+7)/Xcode左下角点击+/Add Exception Breakpoint/完成(回车键)  </p>
<a id="more"></a> 
<h3 id="UI相关"><a href="#UI相关" class="headerlink" title="UI相关"></a>UI相关</h3><p>1、设置状态栏颜色：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">info.plist 添加 View controller-<span class="keyword">based </span>status <span class="keyword">bar </span>appearance - NO     </div><div class="line">代码里写 [[UIApplication <span class="keyword">sharedApplication] </span>setStatusBarStyle:UIStatusBarStyleLightContent]<span class="comment">; 再次运行后状态栏就会变成白色。</span></div></pre></td></tr></table></figure>
<p>2、左滑返回手势失效了怎么办：   </p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">设置 navigationItem.leftBarButtonItem 之后，左滑返回手势就会失效。设置一下 <span class="built_in">UIGestureRecognizerDelegate</span> 代理即可：</div><div class="line"></div><div class="line"><span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer.delegate = <span class="keyword">self</span>;</div></pre></td></tr></table></figure>
<p>3、让 TableView的 下拉 和 上拉 显示不一样的背景颜色：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">给 <span class="selector-tag">TableView</span> 上加一个 <span class="selector-tag">View</span>，<span class="selector-tag">View</span> 的 <span class="selector-tag">Frema</span>：</div><div class="line"><span class="selector-tag">CGRectMake</span>(0, <span class="selector-tag">-self</span><span class="selector-class">.view</span><span class="selector-class">.bounds</span><span class="selector-class">.size</span><span class="selector-class">.height</span>, <span class="selector-tag">self</span><span class="selector-class">.view</span><span class="selector-class">.bounds</span><span class="selector-class">.size</span><span class="selector-class">.width</span>, <span class="selector-tag">self</span><span class="selector-class">.view</span><span class="selector-class">.bounds</span><span class="selector-class">.size</span><span class="selector-class">.height</span> + 2)，</div><div class="line">给变<span class="selector-tag">View</span>的背景颜色就可以了。</div></pre></td></tr></table></figure>
<p><br><br>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="http://xiaoshenmao.github.io/blog/2016/12/02/2016/12/iOS_Dev_Note/" target="_blank" rel="external">iOS开发中的小问题记录</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;NSKeyedArchiver-自定义对象写文件&quot;&gt;&lt;a href=&quot;#NSKeyedArchiver-自定义对象写文件&quot; class=&quot;headerlink&quot; title=&quot;NSKeyedArchiver 自定义对象写文件&quot;&gt;&lt;/a&gt;NSKeyedArchiver 自定义对象写文件&lt;/h3&gt;&lt;p&gt;如果存储的对象类名有变动，则需要设置clasName, 方法为：“setClassName:forClass:”&lt;br&gt;使用 NSKeyedArchiver 进行数据持久化时, 系统会默认使用类名去建表，如果类名变了，那么使用新的类名肯定是从本地获取不到表的，代码执行崩溃。&lt;br&gt;所以需要在 NSKeyedArchiver 或者 NSKeyedUnarchiver 时使用 “setClassName:forClass:” 指定类名。 &lt;/p&gt;
&lt;h3 id=&quot;断点配置：【Generate-Debug-Symbols】&quot;&gt;&lt;a href=&quot;#断点配置：【Generate-Debug-Symbols】&quot; class=&quot;headerlink&quot; title=&quot;断点配置：【Generate Debug Symbols】&quot;&gt;&lt;/a&gt;断点配置：【Generate Debug Symbols】&lt;/h3&gt;&lt;p&gt;描述: 用来控制断点是否生效,关闭此功能，打包 &lt;code&gt;.ipa&lt;/code&gt; 时，包体积会小很多。&lt;br&gt;配置路径:【project/TARGETS/Build Settings/Apple LLVM7.1 - Code Genneration/Generate Debug Symbols】    &lt;/p&gt;
&lt;h3 id=&quot;捕获全局异常：【All-Exception】&quot;&gt;&lt;a href=&quot;#捕获全局异常：【All-Exception】&quot; class=&quot;headerlink&quot; title=&quot;捕获全局异常：【All Exception】&quot;&gt;&lt;/a&gt;捕获全局异常：【All Exception】&lt;/h3&gt;&lt;p&gt;描述: 用来捕捉整个项目在 Xcode 里执行时的异常。例如：try/catch 时 catch住的异常,【All Exception】可以直接定位到具体位置。&lt;br&gt;配置路径: 异常捕捉(commod+7)/Xcode左下角点击+/Add Exception Breakpoint/完成(回车键)  &lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="//xiaoshenmao.github.io/blog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>使用 TensorFlow 实现神经网络</title>
    <link href="//xiaoshenmao.github.io/blog/2016/11/20/2016-11-20-neural_networks_using_TensorFlow/"/>
    <id>//xiaoshenmao.github.io/blog/2016/11/20/2016-11-20-neural_networks_using_TensorFlow/</id>
    <published>2016-11-19T16:00:00.000Z</published>
    <updated>2017-08-22T16:55:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>　　一直关注 <code>数据科学</code> 、 <code>机器学习</code> 的同学，一定会经常看到或听到关于 <code>深度学习</code> 和 <code>神经网络</code> 相关信息。如果你对 <code>深度学习</code> 感兴趣，但却还没有实际动手操作过，你可以从这里得到实践。 </p>
<p>　　在本文中，我将介绍 <code>TensorFlow</code> , 帮你了解 <code>神经网络</code> 的实际作用，并使用 <code>TensorFlow</code> 来解决现实生活中的问题。 读这篇文章前，需要知道 <code>神经网络</code> 的基础知识和一些熟悉编程理念，文章中的代码是使用 <code>Pyhton</code> 编写的，所以还需要了解一些 <code>Python</code> 的基本语法，才能更有利对于文章的理解。                  </p>
<div align="center"><br>    <img src="/blog/assets/posts/tfimg/logo.jpg" height="300" width="500"><br></div> 

<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li><a href="#When-to-apply-neural-net">什么时候应用神经网络？</a></li>
<li><a href="#solve-problems">通常神经网络能解决的问题</a></li>
<li><a href="#popular-libraries">了解图像数据和主流的库来解决问题</a></li>
<li><a href="#What-is-TensorFlow">什么是 TensorFlow？</a></li>
<li><a href="#A-typical-flow">TensorFlow 一个 典型 的 “ 流 ”</a></li>
<li><a href="#MLP">在 TensorFlow 中实现 MLP</a></li>
<li><a href="#Limitations-of-TensorFlow">TensorFlow 的限制</a></li>
<li><a href="#vs-libraries">TensorFlow 与其他库</a></li>
<li><a href="#Where-to-go-from-here">从这里去哪里？</a></li>
</ul>
<a id="more"></a> 
<h3 id="什么时候用神经网络？"><a href="#什么时候用神经网络？" class="headerlink" title="什么时候用神经网络？"></a><a name="When-to-apply-neural-net"></a>什么时候用神经网络？</h3><p>　　<code>神经网络</code> 已经在相当一段时间成为机器学习中的焦点。 对于 <code>神经网络</code> 和 <code>深度学习</code> 上这里有更详细的解释 <a href="https://www.analyticsvidhya.com/blog/2016/08/evolution-core-concepts-deep-learning-neural-networks/" target="_blank" rel="external">点击阅读</a> 。 其 “更深” 的功能在许多领域都有取得巨大的突破，如图像识别，语音和自然语言处理等。</p>
<p>　　主要的问题在于如何用好 <code>神经网络</code> ？现在，每天都会有许多新发现，这个领域就像一个金矿，为了成为这个 “淘金热” 的一部分，必须记住几件事：</p>
<ul>
<li><p><strong>首先，<code>神经网络</code> 需要有明确和翔实的数据（主要是大数据）训练</strong>， 试着想象 <code>神经网络</code> 作为一个孩子，它一开始会观察它父母走路，然后它试图自己走，每一步就像学习执行一个特定的任务。 它可能会失败几次，但经过几次失败的尝试，它将会如何走路。所以需要为孩子提供更多的机会，如果不让它走，它可能永远不会学习如何走路。</p>
</li>
<li><p><strong>一些人会利用 <code>神经网络</code> 解决复杂的问题，如图像处理，</strong>  <code>神经网络</code> 属于一类代表学习的算法，这些算法可以把复杂的问题分解为简单的形式，使他们成为可以理解的（或 “可表示”），就像吞咽食物之前的咀嚼，让我们更容易吸收和消化。这个分解的过程如果使用传统的算法来实现也可以，但是实现过程将会很困难。</p>
</li>
<li><p><strong>选择适当类型的 <code>神经网络</code> ，来解决问题，</strong>  每个问题的复杂情况都不一样，所以数据决定你解决问题的方式。 例如，如果问题是序列生成的问题，<code>递归神经网络</code> 更合适。如果它是图像相关的问题，想更好地解决可以采取 <code>卷积神经网络</code>。</p>
</li>
<li><p><strong>最后最重要的就是 <code>硬件</code> 要求了，硬件是运行 <code>神经网络</code> 模型的关键。</strong> 神经网被 “发现” 很久以前，他们在近年来得到推崇的主要的原因就是计算资源更好，能更大发挥它的光芒，如果你想使用 <code>神经网络</code> 解决这些现实生活中的问题，那么你得准备购买一些高端的硬件了😆！</p>
</li>
</ul>
<h3 id="通常神经网络解决的问题"><a href="#通常神经网络解决的问题" class="headerlink" title="通常神经网络解决的问题"></a><a name="solve-problems"></a>通常神经网络解决的问题</h3><p>　　神经网络是一种特殊类型的 机器学习（ML）算法。 因此，作为每个 ML 算法都遵循 数据预处理 、模型建立 和 模型评估 的工作流流程。为了简明起见，下面列出了如何处理 <code>神经网络</code> 问题的 TODO 列表。</p>
<ul>
<li>检查它是否为 神经网络 ，把它看成一个传统的算法问题</li>
<li>做一个调查，哪个 神经网络 框架最适合解决这个问题</li>
<li>定义 神经网络 框架，通过它选择对应的 编程语言 和 库</li>
<li>将数据转换为正确的格式并分批分割</li>
<li>根据您的需要预处理数据</li>
<li>增强数据以增加大小并制作更好的训练模型</li>
<li>批次供给到 神经网络</li>
<li>训练和监测，培训和验证数据集的变化</li>
<li>测试你的模型，并保存以备将来使用</li>
</ul>
<p>　　本文将专注于图像数据，我们从 TensorFlow 入手。</p>
<h3 id="了解图像数据和主流的库来解决问题"><a href="#了解图像数据和主流的库来解决问题" class="headerlink" title="了解图像数据和主流的库来解决问题"></a><a name="popular-libraries"></a>了解图像数据和主流的库来解决问题</h3><p>　　图像大多排列为 3-D 阵列，具体指 高度、宽度 和 颜色通道。例如，如果你使用电脑截屏，它将首先转换成一个 3-D 数组，然后压缩它为 ‘.jpeg’ 或 ‘.png’ 文件格式。</p>
<p>　　虽然这些图像对于人类来说很容易理解，但计算机很难理解它们。 这种现象称为“语义空隙”。我们的大脑可以看看图像，并在几秒钟内读懂完整的图片。但计算机会将图像看作一个数字数组，问题来了，它想知道这是一张什么样的图像，我们应该怎么样把图像解释给机器它才能读懂？</p>
<p>　　在早期，人们试图将图像分解为机器的 “可理解” 格式，如“模板”。例如，面部总是具有在每个人中有所保留的特定结构，例如眼睛，鼻子或我们的脸的形状。 但是这种方法将是有缺陷的，因为当要识别的对象的数量将增加到一定量级时，“模板” 将不成立。</p>
<p>　　2012年一个深层神经网络架构赢得了 ImageNet 的挑战，从自然场景中识别对象，它在即将到来的 ImageNet 挑战中继续统治其主权，从而证明了解决图像问题的有用性。<br>人们通常使用哪些 库 / 语言 来解决图像识别问题？<a href="https://www.analyticsvidhya.com/blog/2016/08/deep-learning-path/" target="_blank" rel="external">最近的一次调查</a>中，最流行的深度学习库，支持的最友好的语言有 Python ，其次是 Lua ，对 Java 和 Matlab 支持的也有。最流行的库举几个例子：</p>
<ul>
<li><a href="http://caffe.berkeleyvision.org/" target="_blank" rel="external">Caffe</a></li>
<li><a href="http://deeplearning4j.org/" target="_blank" rel="external">DeepLearning4j</a></li>
<li><a href="https://www.tensorflow.org/" target="_blank" rel="external">TensorFlow</a></li>
<li><a href="http://www.deeplearning.net/software/theano" target="_blank" rel="external">Theano</a></li>
<li><a href="http://torch.ch/" target="_blank" rel="external">Torch</a></li>
</ul>
<p>现在，我们了解了图像的存储方式以及使用的常用库，让我们看看 <code>TensorFlow</code> 提供的功能。</p>
<h3 id="什么是-TensorFlow-？"><a href="#什么是-TensorFlow-？" class="headerlink" title="什么是 TensorFlow ？"></a><a name="What-is-TensorFlow"></a>什么是 TensorFlow ？</h3><p>让我们从官方定义开始.</p>
<p>　　“<code>TensorFlow</code> 是一个开源软件库，用于使用数据流图进行数值计算。图中的节点表示数学运算，而图边表示在它们之间传递的多维数据阵列（也称为张量）。 灵活的架构允许您使用单一 API 将计算部署到桌面、服务器或移动设备中的一个或多个的 CPU 或 GPU 中。</p>
<p><img src="http://www.tensorfly.cn/blog/assets/tensors_flowing.gif" alt="">     </p>
<p>　　如果感觉这听起来太高大上，不要担心。这里有我简单的定义，<code>TensorFlow</code> 看起来没什么，只是 numpy 有些难以理解。如果你以前使用过 numpy ，理解 TensorFlow 将是手到擒来！ numpy 和 TensorFlow 之间的主要区别是 TensorFlow 遵循惰性编程范例。 TensorFlow 的操作基本上都是对 session 的操作，它首先构建一个所有操作的图形，当我们调用 session 时 TensorFlow 就开始工作了。它通过将内部数据表示转换为张量（Tensor，也称为多维数组）来构建为可扩展的。 构建计算图可以被认为是 TensorFlow 的主要成分。想更多地了解一个计算图形的数学结构，可以阅读 <a href="http://colah.github.io/posts/2015-08-Backprop/" target="_blank" rel="external">这篇文章</a> 。</p>
<p>　　通过上面的介绍，很容易将 TensorFlow 分类为神经网络库，但它不仅仅是如此。它被设计成一个强大的神经网络库， 但它有能力做更多的事情。可以构建它为其他机器学习算法，如 决策树 或 k-最近邻，你可以从字面上理解，你可以做一切你在 numpy 上能做的事情！我们暂且称它为 “全能的 numpy” 。</p>
<p><strong>使用 TensorFlow 的优点是：</strong></p>
<ul>
<li><strong>它有一个直观的结构</strong> ，顾名思义它有 “张量流”，你可以轻松地可视每个图中的每一个部分。</li>
<li><strong>轻松地在 cpu / gpu 上进行分布式计算</strong> </li>
<li><strong>平台的灵活性</strong>  。可以随时随地运行模型，无论是在移动端、服务器还是 PC 上。</li>
</ul>
<h3 id="TensorFlow-的典型-“流”"><a href="#TensorFlow-的典型-“流”" class="headerlink" title="TensorFlow 的典型 “流”"></a><a name="A-typical-flow"></a>TensorFlow 的典型 “流”</h3><p>　　每个库都有自己的“实现细节”，即一种写其遵循其编码范例的方式。 例如，当实现 scikit-learn 时，首先创建所需算法的对象，然后在训练和测试集上构建一个模型获得预测，如下所示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># define hyperparamters of ML algorithm</span></div><div class="line">clf = svm.SVC(gamma=<span class="number">0.001</span>, C=<span class="number">100.</span>)</div><div class="line"><span class="comment"># train </span></div><div class="line">clf.fit(X, y)</div><div class="line"><span class="comment"># test </span></div><div class="line">clf.predict(X_test)</div></pre></td></tr></table></figure>
<p>正如我前面所说，TensorFlow 遵循一种懒惰的方法。 在 TensorFlow 中运行程序的通常工作流程如下：</p>
<ul>
<li><strong>建立一个计算图</strong>， 任何的数学运算可以使用 TensorFlow 支撑。</li>
<li><strong>初始化变量</strong>， 编译预先定义的变量   </li>
<li><strong>创建 session</strong>， 这是神奇的开始的地方 ！  </li>
<li><strong>在 session 中运行图</strong>， 编译图形被传递到 session ，它开始执行它。</li>
<li><strong>关闭 session</strong>， 结束这次使用。</li>
</ul>
<p>TensoFlow 中使用的术语很少   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">placeholder：将数据输入图形的一种方法</div><div class="line">feed_dict：将数值传递到计算图的字典</div></pre></td></tr></table></figure>
<p>让我们写一个小程序来添加两个数字！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># import tensorflow</div><div class="line">import tensorflow as tf</div><div class="line"></div><div class="line"># build computational graph</div><div class="line">a = tf.placeholder(tf.int16)</div><div class="line">b = tf.placeholder(tf.int16)</div><div class="line"></div><div class="line">addition = tf.add(a, b)</div><div class="line"></div><div class="line"># initialize variables</div><div class="line">init = tf.initialize_all_variables()</div><div class="line"></div><div class="line"># create session and run the graph</div><div class="line">with tf.Session() as sess:</div><div class="line">    sess.run(init)</div><div class="line">    print &quot;Addition: %i&quot; % sess.run(addition, feed_dict=&#123;a: 2, b: 3&#125;)</div><div class="line"></div><div class="line"># close session</div><div class="line">sess.close()</div></pre></td></tr></table></figure>
<h3 id="在-TensorFlow-中实现神经网络"><a href="#在-TensorFlow-中实现神经网络" class="headerlink" title="在 TensorFlow 中实现神经网络"></a><a name="MLP"></a>在 TensorFlow 中实现神经网络</h3><p><em>注意：我们可以使用不同的神经网络体系结构来解决这个问题，但是为了简单起见，我们在深入实施中讨论 <code>前馈多层感知器</code>。</em></p>
<p>让我们记住对神经网络的了解。</p>
<p>神经网络的典型实现如下：</p>
<ul>
<li>定义要编译的神经网络体系结构</li>
<li>将数据传输到模型</li>
<li>整个运行中，数据首先被分成批次，以便它可以被摄取。首先对批次进行预处理，扩增，然后送入神经网络进行训练</li>
<li>然后，模型被逐步地训练</li>
<li>显示特定数量的时间步长的精度</li>
<li>训练后保存模型供将来使用</li>
<li>在新数据上测试模型并检查其运行方式</li>
</ul>
<p>在这里，我们解决了我们深刻的学习实践中的问题 - [识别数字]，让再我们花一点时间看看问题陈述。</p>
<p>　　我们的问题是图像识别，以识别来自给定的 28×28 图像的数字。 我们有一个图像子集用于训练，其余的用于测试我们的模型。首先下载训练和测试文件。数据集包含数据集中所有图像的压缩文件， train.csv 和 test.csv 都有相应的训练和测试图像的名称。数据集中不提供任何其他功能，只是原始图像以 “.png” 格式提供。</p>
<p>　　如之前说的，我们将使用 TensorFlow 来创建一个神经网络模型。 所以首先在你的系统中安装 TensorFlow 。 请参考 <a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md" target="_blank" rel="external">官方的安装指南</a> 进行安装，按您的系统规格。</p>
<p>我们将按照上述模板</p>
<ul>
<li>让我们来 导入所有需要的模块</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">%pylab inline</div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</div><div class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div></pre></td></tr></table></figure>
<ul>
<li>让我们来 设置一个种子值，这样我们就可以控制我们的模型随机性</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># To stop potential randomness</span></div><div class="line">seed = <span class="number">128</span></div><div class="line">rng = np.random.RandomState(seed)</div></pre></td></tr></table></figure>
<ul>
<li>第一步是设置目录路径，以便保管！</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">root_dir = os.path.abspath(<span class="string">'../..'</span>)</div><div class="line">data_dir = os.path.join(root_dir, <span class="string">'data'</span>)</div><div class="line">sub_dir = os.path.join(root_dir, <span class="string">'sub'</span>)</div><div class="line"></div><div class="line"><span class="comment"># check for existence</span></div><div class="line">os.path.exists(root_dir)</div><div class="line">os.path.exists(data_dir)</div><div class="line">os.path.exists(sub_dir)</div></pre></td></tr></table></figure>
<ul>
<li>现在让我们读取我们的数据集，这些是 .csv 格式，并有一个文件名以及相应的标签</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">train = pd.read_csv(os.path.join(data_dir，<span class="string">'Train'</span>，<span class="string">'train.csv'</span>))</div><div class="line">test = pd.read_csv(os.path.join（data_dir，<span class="string">'Test.csv'</span>))</div><div class="line">sample_submission = pd.read_csv(os.path.join(data_dir，<span class="string">'Sample_Submission.csv'</span>))</div><div class="line">train.head()</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">文件名</th>
<th style="text-align:right">标签</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td style="text-align:center">0.png</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td>1</td>
<td style="text-align:center">1.png</td>
<td style="text-align:right">9</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center">2.png</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">3.png</td>
<td style="text-align:right">7</td>
</tr>
<tr>
<td>4</td>
<td style="text-align:center">4.png</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<ul>
<li>让我们看看我们的数据是什么样子！我们读取我们的形象并显示出来。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">img_name = rng.choice(train.filename)</div><div class="line">filepath = os.path.join(data_dir, <span class="string">'Train'</span>, <span class="string">'Images'</span>, <span class="string">'train'</span>, img_name)</div><div class="line"></div><div class="line">img = imread(filepath, flatten=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">pylab.imshow(img, cmap=<span class="string">'gray'</span>)</div><div class="line">pylab.axis(<span class="string">'off'</span>)</div><div class="line">pylab.show()</div></pre></td></tr></table></figure>
<p><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/3.png" alt="">       </p>
<p>上面的图像表示为 numpy 数组，如下所示</p>
<p><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/one.png" alt="">       </p>
<ul>
<li>为了方便数据操作，让我们 的存储作为 numpy 的阵列的所有图片</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">temp = []</div><div class="line"><span class="keyword">for</span> img_name <span class="keyword">in</span> train.filename:</div><div class="line">    image_path = os.path.join(data_dir, <span class="string">'Train'</span>, <span class="string">'Images'</span>, <span class="string">'train'</span>, img_name)</div><div class="line">    img = imread(image_path, flatten=<span class="keyword">True</span>)</div><div class="line">    img = img.astype(<span class="string">'float32'</span>)</div><div class="line">    temp.append(img)</div><div class="line">    </div><div class="line">train_x = np.stack(temp)</div><div class="line"></div><div class="line">temp = []</div><div class="line"><span class="keyword">for</span> img_name <span class="keyword">in</span> test.filename:</div><div class="line">    image_path = os.path.join(data_dir, <span class="string">'Train'</span>, <span class="string">'Images'</span>, <span class="string">'test'</span>, img_name)</div><div class="line">    img = imread(image_path, flatten=<span class="keyword">True</span>)</div><div class="line">    img = img.astype(<span class="string">'float32'</span>)</div><div class="line">    temp.append(img)</div><div class="line">    </div><div class="line">test_x = np.stack(temp)</div></pre></td></tr></table></figure>
<ul>
<li>由于这是典型的 ML 问题，为了测试我们的模型的正确功能，我们创建一个验证集，让我们以 70:30 的分割训练集 和 验证集</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">split_size = int(train_x.shape[<span class="number">0</span>]*<span class="number">0.7</span>)</div><div class="line"></div><div class="line">train_x, val_x = train_x[:split_size], train_x[split_size:]</div><div class="line">train_y, val_y = train.label.values[:split_size], train.label.values[split_size:]</div></pre></td></tr></table></figure>
<ul>
<li>我们定义一些辅助函数，我们稍后在我们的程序中使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dense_to_one_hot</span><span class="params">(labels_dense, num_classes=<span class="number">10</span>)</span>:</span></div><div class="line">    <span class="string">"""Convert class labels from scalars to one-hot vectors"""</span></div><div class="line">    num_labels = labels_dense.shape[<span class="number">0</span>]</div><div class="line">    index_offset = np.arange(num_labels) * num_classes</div><div class="line">    labels_one_hot = np.zeros((num_labels, num_classes))</div><div class="line">    labels_one_hot.flat[index_offset + labels_dense.ravel()] = <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> labels_one_hot</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">preproc</span><span class="params">(unclean_batch_x)</span>:</span></div><div class="line">    <span class="string">"""Convert values to range 0-1"""</span></div><div class="line">    temp_batch = unclean_batch_x / unclean_batch_x.max()</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> temp_batch</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_creator</span><span class="params">(batch_size, dataset_length, dataset_name)</span>:</span></div><div class="line">    <span class="string">"""Create batch with random samples and return appropriate format"""</span></div><div class="line">    batch_mask = rng.choice(dataset_length, batch_size)</div><div class="line">    </div><div class="line">    batch_x = eval(dataset_name + <span class="string">'_x'</span>)[[batch_mask]].reshape(<span class="number">-1</span>, <span class="number">784</span>)</div><div class="line">    batch_x = preproc(batch_x)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> dataset_name == <span class="string">'train'</span>:</div><div class="line">        batch_y = eval(dataset_name).ix[batch_mask, <span class="string">'label'</span>].values</div><div class="line">        batch_y = dense_to_one_hot(batch_y)</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> batch_x, batch_y</div></pre></td></tr></table></figure>
<ul>
<li>主要部分！ 让我们定义我们的神经网络架构。 我们定义一个神经网络具有 3 层，输入、隐藏 和 输出， 输入和输出中的神经元数目是固定的，因为输入是我们的 28×28 图像，并且输出是表示类的 10×1 向量。 我们在隐藏层中取 500 神经元。这个数字可以根据你的需要变化。我们把值 赋给 其余变量。 可以阅读 <a href="https://www.analyticsvidhya.com/blog/2016/03/introduction-deep-learning-fundamentals-neural-networks/" target="_blank" rel="external">神经网络的基础知识的文章</a> ，以更深的了解它是如何工作。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">### set all variables</span></div><div class="line"></div><div class="line"><span class="comment"># number of neurons in each layer</span></div><div class="line"></div><div class="line">input_num_units = <span class="number">28</span>*<span class="number">28</span></div><div class="line"></div><div class="line">hidden_num_units = <span class="number">500</span></div><div class="line"></div><div class="line">output_num_units = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment"># define placeholders</span></div><div class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, input_num_units])</div><div class="line">y = tf.placeholder(tf.float32, [<span class="keyword">None</span>, output_num_units])</div><div class="line"></div><div class="line"><span class="comment"># set remaining variables</span></div><div class="line">epochs = <span class="number">5</span></div><div class="line">batch_size = <span class="number">128</span></div><div class="line">learning_rate = <span class="number">0.01</span></div><div class="line"></div><div class="line"><span class="comment">### define weights and biases of the neural network (refer this article if you don't understand the terminologies)</span></div><div class="line"></div><div class="line">weights = &#123;</div><div class="line">    <span class="string">'hidden'</span>: tf.Variable(tf.random_normal([input_num_units, hidden_num_units], seed=seed)),</div><div class="line">    <span class="string">'output'</span>: tf.Variable(tf.random_normal([hidden_num_units, output_num_units], seed=seed))</div><div class="line">&#125;</div><div class="line"></div><div class="line">biases = &#123;</div><div class="line">    <span class="string">'hidden'</span>: tf.Variable(tf.random_normal([hidden_num_units], seed=seed)),</div><div class="line">    <span class="string">'output'</span>: tf.Variable(tf.random_normal([output_num_units], seed=seed))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>现在创建我们的神经网络计算图</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">hidden_layer = tf.add(tf.matmul(x, weights[<span class="string">'hidden'</span>]), biases[<span class="string">'hidden'</span>])</div><div class="line">hidden_layer = tf.nn.relu(hidden_layer)</div><div class="line"></div><div class="line">output_layer = tf.matmul(hidden_layer, weights[<span class="string">'output'</span>]) + biases[<span class="string">'output'</span>]</div></pre></td></tr></table></figure>
<ul>
<li>此外，我们需要定义神经网络的成本</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(output_layer, y))</div></pre></td></tr></table></figure>
<ul>
<li>设置优化器，即我们的反向传播算法。 这里我们使用 <a href="https://arxiv.org/abs/1412.6980" target="_blank" rel="external">Adam</a> ，这是梯度下降算法的高效变体。 有在 tensorflow 可用许多其它优化（参照 <a href="https://www.tensorflow.org/versions/r0.11/api_docs/python/train.html#optimizers" target="_blank" rel="external">此处</a> ）</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)</div></pre></td></tr></table></figure>
<ul>
<li>定义我们的神经网络结构后，让我们来 初始化所有的变量</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">init = tf.initialize_all_variables()</div></pre></td></tr></table></figure>
<ul>
<li>现在让我们创建一个 Session ，并在 Session 中运行我们的神经网络。我们还验证我们创建的验证集的模型准确性</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    <span class="comment"># create initialized variables</span></div><div class="line">    sess.run(init)</div><div class="line">    </div><div class="line">    <span class="comment">### for each epoch, do:</span></div><div class="line">    <span class="comment">###   for each batch, do:</span></div><div class="line">    <span class="comment">###     create pre-processed batch</span></div><div class="line">    <span class="comment">###     run optimizer by feeding batch</span></div><div class="line">    <span class="comment">###     find cost and reiterate to minimize</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</div><div class="line">        avg_cost = <span class="number">0</span></div><div class="line">        total_batch = int(train.shape[<span class="number">0</span>]/batch_size)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(total_batch):</div><div class="line">            batch_x, batch_y = batch_creator(batch_size, train_x.shape[<span class="number">0</span>], <span class="string">'train'</span>)</div><div class="line">            _, c = sess.run([optimizer, cost], feed_dict = &#123;x: batch_x, y: batch_y&#125;)</div><div class="line">            </div><div class="line">            avg_cost += c / total_batch</div><div class="line">            </div><div class="line">        <span class="keyword">print</span> <span class="string">"Epoch:"</span>, (epoch+<span class="number">1</span>), <span class="string">"cost ="</span>, <span class="string">"&#123;:.5f&#125;"</span>.format(avg_cost)</div><div class="line">    </div><div class="line">    <span class="keyword">print</span> <span class="string">"\nTraining complete!"</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment"># find predictions on val set</span></div><div class="line">    pred_temp = tf.equal(tf.argmax(output_layer, <span class="number">1</span>), tf.argmax(y, <span class="number">1</span>))</div><div class="line">    accuracy = tf.reduce_mean(tf.cast(pred_temp, <span class="string">"float"</span>))</div><div class="line">    <span class="keyword">print</span> <span class="string">"Validation Accuracy:"</span>, accuracy.eval(&#123;x: val_x.reshape(<span class="number">-1</span>, <span class="number">784</span>), y: dense_to_one_hot(val_y.values)&#125;)</div><div class="line">    </div><div class="line">    predict = tf.argmax(output_layer, <span class="number">1</span>)</div><div class="line">    pred = predict.eval(&#123;x: test_x.reshape(<span class="number">-1</span>, <span class="number">784</span>)&#125;)</div></pre></td></tr></table></figure>
<p>这将是上面代码的输出</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Epoch: <span class="number">1</span> cost = <span class="number">8.93566</span></div><div class="line">Epoch: <span class="number">2</span> cost = <span class="number">1.82103</span></div><div class="line">Epoch: <span class="number">3</span> cost = <span class="number">0.98648</span></div><div class="line">Epoch: <span class="number">4</span> cost = <span class="number">0.57141</span></div><div class="line">Epoch: <span class="number">5</span> cost = <span class="number">0.44550</span></div><div class="line"></div><div class="line">Training complete!</div><div class="line">Validation Accuracy: <span class="number">0.952823</span></div></pre></td></tr></table></figure>
<ul>
<li>验证我们自己的眼睛，让我们来 想象它的预言</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">img_name = rng.choice(test.filename)</div><div class="line">filepath = os.path.join(data_dir, <span class="string">'Train'</span>, <span class="string">'Images'</span>, <span class="string">'test'</span>, img_name)</div><div class="line"></div><div class="line">img = imread(filepath, flatten=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">test_index = int(img_name.split(<span class="string">'.'</span>)[<span class="number">0</span>]) - <span class="number">49000</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"Prediction is: "</span>, pred[test_index]</div><div class="line"></div><div class="line">pylab.imshow(img, cmap=<span class="string">'gray'</span>)</div><div class="line">pylab.axis(<span class="string">'off'</span>)</div><div class="line">pylab.show()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Prediction <span class="keyword">is</span>:  <span class="number">8</span></div></pre></td></tr></table></figure>
<p><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/8.png" alt="">       </p>
<ul>
<li>我们看到的模型性能是相当不错！ 现在让我们 创建一个提交</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sample_submission.filename = test.filename</div><div class="line"> </div><div class="line">sample_submission.label = pred</div><div class="line"></div><div class="line">sample_submission.to_csv(os.path.join(sub_dir, <span class="string">'sub01.csv'</span>), index=<span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<p>　　终于完成了！ 我们刚刚创建了自己的训练神经网络！</p>
<h3 id="TensorFlow-的限制"><a href="#TensorFlow-的限制" class="headerlink" title="TensorFlow 的限制"></a><a name="Limitations-of-TensorFlow"></a>TensorFlow 的限制</h3><ul>
<li>尽管 TensorFlow 是强大的，它仍然是一个低水平库，例如，它可以被认为是机器级语言，但对于大多数功能，您需要自己去模块化和高级接口，如 keras</li>
<li>它仍然在继续开发和维护，这是多么👍啊！</li>
<li>它取决于你的硬件规格，配置越高越好</li>
<li>不是所有变成语言能使用它的 API 。</li>
<li>TensorFlow 中仍然有很多库需要手动导入，比如 OpenCL 支持。</li>
</ul>
<p>上面提到的大多数是在 TensorFlow 开发人员的愿景，他们已经制定了一个路线图，计划库未来应该如何开发。</p>
<h3 id="TensorFlow-与其他库"><a href="#TensorFlow-与其他库" class="headerlink" title="TensorFlow 与其他库"></a><a name="vs-libraries"></a>TensorFlow 与其他库</h3><p>　　TensorFlow 建立在类似的原理，如使用数学计算图表的 Theano 和 Torch，但是随着分布式计算的额外支持，TensorFlow 更好地解决复杂的问题。 此外，TensorFlow 模型的部署已经被支持，这使得它更容易用于工业目的，打开一些商业的三方库，如 Deeplearning4j ，H2O 和 Turi。 TensorFlow 有用于 Python，C ++ 和 Matlab 的 API 。 最近还出现了对 Ruby 和 R 等其他语言的支持。因此，TensorFlow 试图获得通用语言支持。</p>
<h3 id="从这里去哪里？"><a href="#从这里去哪里？" class="headerlink" title="从这里去哪里？"></a><a name="Where-to-go-from-here"></a>从这里去哪里？</h3><p>　　以上你看到了如何用 TensorFlow 构建一个简单的神经网络，这段代码是为了让人们了解如何开始实现 TensorFlow。 要解决更复杂的现实生活中的问题，你必须在这篇文章的基础上在调整一些代码才行。</p>
<p>　　许多上述功能可以被抽象为给出无缝的端到端工作流，如果你使用 scikit-learn ，你可能知道一个高级库如何抽象“底层”实现，给终端用户一个更容易的界面。尽管 TensorFlow 已经提取了大多数实现，但是也有更高级的库，如 TF-slim 和 TFlearn。</p>
<h3 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h3><ul>
<li><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="external">TensorFlow 官方库</a> </li>
<li>Rajat Monga（TensorFlow技术负责人） <a href="https://youtu.be/wmw8Bbb_eIE" target="_blank" rel="external">“TensorFlow为大家”</a>  的视频</li>
<li><a href="https://github.com/jtoy/awesome-tensorflow/#github-projects" target="_blank" rel="external">一个专用资源的策划列表</a>  </li>
</ul>
<h3 id="关于原文"><a href="#关于原文" class="headerlink" title="关于原文"></a>关于原文</h3><p>感谢原文作者 <a href="https://www.analyticsvidhya.com/blog/author/jalfaizy/" target="_blank" rel="external">Faizan Shaikh</a> 的分享，<br>这篇文章是在 <a href="https://www.analyticsvidhya.com/blog/2016/10/an-introduction-to-implementing-neural-networks-using-tensorflow/" target="_blank" rel="external">An Introduction to Implementing Neural Networks using TensorFlow</a> 的基础上做的翻译和局部调整，如果发现翻译中有不对或者歧义的的地方欢迎在下面评论里提问，我会加以修正 。</p>
<p><br><br>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/11/20/2016-11-20-neural_networks_using_TensorFlow/" target="_blank" rel="external">使用 TensorFlow 实现神经网络</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;　　一直关注 &lt;code&gt;数据科学&lt;/code&gt; 、 &lt;code&gt;机器学习&lt;/code&gt; 的同学，一定会经常看到或听到关于 &lt;code&gt;深度学习&lt;/code&gt; 和 &lt;code&gt;神经网络&lt;/code&gt; 相关信息。如果你对 &lt;code&gt;深度学习&lt;/code&gt; 感兴趣，但却还没有实际动手操作过，你可以从这里得到实践。 &lt;/p&gt;
&lt;p&gt;　　在本文中，我将介绍 &lt;code&gt;TensorFlow&lt;/code&gt; , 帮你了解 &lt;code&gt;神经网络&lt;/code&gt; 的实际作用，并使用 &lt;code&gt;TensorFlow&lt;/code&gt; 来解决现实生活中的问题。 读这篇文章前，需要知道 &lt;code&gt;神经网络&lt;/code&gt; 的基础知识和一些熟悉编程理念，文章中的代码是使用 &lt;code&gt;Pyhton&lt;/code&gt; 编写的，所以还需要了解一些 &lt;code&gt;Python&lt;/code&gt; 的基本语法，才能更有利对于文章的理解。                  &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/blog/assets/posts/tfimg/logo.jpg&quot; height=&quot;300&quot; width=&quot;500&quot;&gt;&lt;br&gt;&lt;/div&gt; 

&lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#When-to-apply-neural-net&quot;&gt;什么时候应用神经网络？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#solve-problems&quot;&gt;通常神经网络能解决的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#popular-libraries&quot;&gt;了解图像数据和主流的库来解决问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#What-is-TensorFlow&quot;&gt;什么是 TensorFlow？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#A-typical-flow&quot;&gt;TensorFlow 一个 典型 的 “ 流 ”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#MLP&quot;&gt;在 TensorFlow 中实现 MLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Limitations-of-TensorFlow&quot;&gt;TensorFlow 的限制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vs-libraries&quot;&gt;TensorFlow 与其他库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Where-to-go-from-here&quot;&gt;从这里去哪里？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="//xiaoshenmao.github.io/blog/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Markdown工具集</title>
    <link href="//xiaoshenmao.github.io/blog/2016/11/20/2016-11-20-markdownTool/"/>
    <id>//xiaoshenmao.github.io/blog/2016/11/20/2016-11-20-markdownTool/</id>
    <published>2016-11-19T16:00:00.000Z</published>
    <updated>2017-08-22T16:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h3><p>　　Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：如您正在阅读的这篇文章。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字.</p>
<p>　　很多产品的文档也是用markdown编写的，并且以“README.MD”的文件名保存在软件的目录下面。               
　　</p>
<h3 id="一些基本语法"><a href="#一些基本语法" class="headerlink" title="一些基本语法"></a>一些基本语法</h3><p>标题<br>H1 :# Header 1<br>H2 :## Header 2<br>H3 :### Header 3<br>H4 :#### Header 4<br>H5 :##### Header 5<br>H6 :###### Header 6<br>链接 :<a href="URL">Title</a><br>加粗 :<strong>Bold</strong><br>斜体字 :<em>Italics</em><br><em>删除线 :<del>text</del><br>段落 : 段落之间空一行<br>换行符 : 一行结束时输入两个空格<br>列表 :</em> 添加星号成为一个新的列表项。<br>引用 :&gt; 引用内容<br>内嵌代码 : <code>alert(&#39;Hello World&#39;);</code><br>画水平线 (HR) :——–          </p>
<a id="more"></a> 
<p>css 的大部分语法同样可以在 markdown 上使用，但不同的渲染器渲染出来的 markdown 内容样式也不一样，下面这些链接里面有 markdown 基本语法，你也可以在下面几个平台上尝试着写一些。</p>
<h3 id="一些好用的-Markdown-编辑器"><a href="#一些好用的-Markdown-编辑器" class="headerlink" title="一些好用的 Markdown 编辑器"></a>一些好用的 Markdown 编辑器</h3><p><br></p>
<p><a href="http://mahua.jser.me/?utm_source=mindstore.io" target="_blank" rel="external">MaHua</a> 在线 Markdown 编辑器 ,无须测试。</p>
<p><br></p>
<p><img src="/blog/assets/posts/markdown/image1.png" alt=""></p>
<p><br></p>
<p><a href="http://mdp.tylingsoft.com/" target="_blank" rel="external">Markdown Plus</a> 一款 Markdown 编辑器，可以支持添加任务列表、emoji、流程图等。</p>
<p><br></p>
<p><img src="/blog/assets/posts/markdown/image2.png" alt=""></p>
<p><br></p>
<p><a href="https://www.zybuluo.com/cmd/?utm_source=mindstore.io" target="_blank" rel="external">Cmd Markdown</a> 作业部落在线 Markdown 编辑器推出桌面版客户端啦，全平台支援。</p>
<p><img src="/blog/assets/posts/markdown/image3.png" alt=""></p>
<p><a href="https://github.com/MacDownApp/macdown" target="_blank" rel="external">Macdown</a> Github 上开源的 Mac 平台上的 Markdown 编辑器</p>
<p><a href="https://www.gitbook.com/editor?utm_source=mindstore.io" target="_blank" rel="external">GitBook Editor</a> 一款团队在线编辑文档工具。可以轻松书写笔记，支持团队协同编辑。同时支持 Markdown 语法，还保持了印象笔记的风格并可在线预览。</p>
<p><a href="http://www.glamdevelopment.com/outlinely?utm_source=mindstore.io" target="_blank" rel="external">Outlinely</a> 界面简洁大方的大纲类 Mac 软件，使用起来很简单，而且支持输出 Markdown 格式。</p>
<p><a href="http://classeur.io/?utm_source=mindstore.io" target="_blank" rel="external">Classeur</a> 实用简洁的 Markdown 写作工具，快速上手。</p>
<p><a href="https://github.com/geekcompany/DeerResume?utm_source=mindstore.io" target="_blank" rel="external">DeerResume</a> 程序员专用 MarkDown 简历制作在线工具。                </p>
<p><br></p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/11/20/2016-11-20-markdownTool/" target="_blank" rel="external">Markdown工具集</a>                   </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是-Markdown&quot;&gt;&lt;a href=&quot;#什么是-Markdown&quot; class=&quot;headerlink&quot; title=&quot;什么是 Markdown&quot;&gt;&lt;/a&gt;什么是 Markdown&lt;/h3&gt;&lt;p&gt;　　Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：如您正在阅读的这篇文章。它使用简单的符号标记不同的标题，分割不同的段落，&lt;strong&gt;粗体&lt;/strong&gt; 或者 &lt;em&gt;斜体&lt;/em&gt; 某些文字.&lt;/p&gt;
&lt;p&gt;　　很多产品的文档也是用markdown编写的，并且以“README.MD”的文件名保存在软件的目录下面。               
　　&lt;/p&gt;
&lt;h3 id=&quot;一些基本语法&quot;&gt;&lt;a href=&quot;#一些基本语法&quot; class=&quot;headerlink&quot; title=&quot;一些基本语法&quot;&gt;&lt;/a&gt;一些基本语法&lt;/h3&gt;&lt;p&gt;标题&lt;br&gt;H1 :# Header 1&lt;br&gt;H2 :## Header 2&lt;br&gt;H3 :### Header 3&lt;br&gt;H4 :#### Header 4&lt;br&gt;H5 :##### Header 5&lt;br&gt;H6 :###### Header 6&lt;br&gt;链接 :&lt;a href=&quot;URL&quot;&gt;Title&lt;/a&gt;&lt;br&gt;加粗 :&lt;strong&gt;Bold&lt;/strong&gt;&lt;br&gt;斜体字 :&lt;em&gt;Italics&lt;/em&gt;&lt;br&gt;&lt;em&gt;删除线 :&lt;del&gt;text&lt;/del&gt;&lt;br&gt;段落 : 段落之间空一行&lt;br&gt;换行符 : 一行结束时输入两个空格&lt;br&gt;列表 :&lt;/em&gt; 添加星号成为一个新的列表项。&lt;br&gt;引用 :&amp;gt; 引用内容&lt;br&gt;内嵌代码 : &lt;code&gt;alert(&amp;#39;Hello World&amp;#39;);&lt;/code&gt;&lt;br&gt;画水平线 (HR) :——–          &lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="//xiaoshenmao.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Mac知识整合</title>
    <link href="//xiaoshenmao.github.io/blog/2016/11/16/2016-11-16-macTips/"/>
    <id>//xiaoshenmao.github.io/blog/2016/11/16/2016-11-16-macTips/</id>
    <published>2016-11-15T16:00:00.000Z</published>
    <updated>2017-08-22T16:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DS-Store-文件是什么？"><a href="#DS-Store-文件是什么？" class="headerlink" title=".DS_Store 文件是什么？"></a>.DS_Store 文件是什么？</h3><p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件，如文件的图标位置或背景色，相当于 Windows 的 desktop.ini。</p>
<p>1，禁止.DS_store 生成：<br>打开 “终端” ，复制黏贴下面的命令，回车执行，重启Mac即可生效。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com<span class="selector-class">.apple</span><span class="selector-class">.desktopservices</span> DSDontWriteNetworkStores -bool TRUE</div></pre></td></tr></table></figure>
<p>2，恢复.DS_store生成：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults delete com<span class="selector-class">.apple</span><span class="selector-class">.desktopservices</span> DSDontWriteNetworkStores</div></pre></td></tr></table></figure>
<h3 id="显示隐藏文件"><a href="#显示隐藏文件" class="headerlink" title="显示隐藏文件"></a>显示隐藏文件</h3><p>在终端执行命令，显示隐藏文件</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com<span class="selector-class">.apple</span><span class="selector-class">.finder</span> AppleShowAllFiles -bool true</div></pre></td></tr></table></figure>
<p>恢复隐藏</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com<span class="selector-class">.apple</span><span class="selector-class">.finder</span> AppleShowAllFiles -bool false</div></pre></td></tr></table></figure>
<p>执行命令后需要重新打开能看到效果。</p>
<a id="more"></a> 
<h3 id="切换-Pyhton-环境"><a href="#切换-Pyhton-环境" class="headerlink" title="切换 Pyhton 环境"></a>切换 Pyhton 环境</h3><p>我本地之前 Python 环境是 2.7.10 ，然后学习 Tensorflow 的时候，安装了 Python 3.5.2 ，把系统默认 Pyton 环境也设置成了 3.5.2 版本，今天运行以前写的 python 脚本发现运行不了了，因为python 2.7 和 3.5 的 语法有挺多改动，现在我需要把系统的 python 环境回退到 2.7。</p>
<p>可以直接修改 <code>~/.bash_profile</code> 文件。</p>
<ul>
<li>1、修改 <code>vim ~/.bash_profile</code></li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">修改方式有很多种，使用 <span class="keyword">vim</span>  ，或者 <span class="keyword">cd</span> ~/ 然后 <span class="keyword">open</span> . 打开文件夹，找到 .bash_profile 文件，双击打开。</div></pre></td></tr></table></figure>
<ul>
<li>2、在<code>.bash_profile</code> 文件里添加下面参数 </li>
</ul>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alias</span> <span class="keyword">python</span>=<span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7"</span></div></pre></td></tr></table></figure>
<ul>
<li>3、使用命令 <code>source ~/.bash_profile</code> 或者重启 终端 就 OK 了 。</li>
</ul>
<p>现在你再在终端输入 <code>python</code> 就会发现，显示的信息为 2.7 了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Python 2.7.10 (default, Oct 23 2015, 19:19:21) </div><div class="line">[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div></pre></td></tr></table></figure>
<h3 id="生成SSHKey过程"><a href="#生成SSHKey过程" class="headerlink" title="生成SSHKey过程"></a>生成SSHKey过程</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">1.</span>查看是否已经有了ssh密钥：`cd ~/.ssh` ，如果没有密钥则不会有此文件夹，有则备份删除。    </div><div class="line"><span class="number">2.</span>生存密钥：ssh-keygen -t rsa -C “test<span class="meta">@gmail</span>.com”。   按<span class="number">3</span>个回车，密码为空。       </div><div class="line"></div><div class="line">Your identification has been saved <span class="keyword">in</span> <span class="regexp">/home/</span>tekkub<span class="regexp">/.ssh/</span>id_rsa.</div><div class="line">Your <span class="keyword">public</span> key has been saved <span class="keyword">in</span> <span class="regexp">/home/</span>tekkub<span class="regexp">/.ssh/</span>id_rsa.pub.</div><div class="line">The key fingerprint <span class="string">is:</span></div><div class="line">………………    </div><div class="line">最后得到了两个文件：id_rsa和id_rsa.pub</div></pre></td></tr></table></figure>
<h3 id="使用版本控制器-SVN-versions-添加-a库"><a href="#使用版本控制器-SVN-versions-添加-a库" class="headerlink" title="使用版本控制器 SVN (versions) 添加.a库"></a>使用版本控制器 SVN (versions) 添加.a库</h3><p>Xcode 自带的 svn 和 Versions 以及一些其它工具都不能上传”.a”文件</p>
<p>下面是在 Mac 上如何把 .a 添加到 SVN 里面的</p>
<p>1、打开终端，输入cd，空格，然后将需要上传的 .a 文件所在的文件夹（不是.a文件） 拖拽到终端（此办法无需输入繁琐的路径，快捷方便） 回车</p>
<p>2、之后再输入如下命令：<code>svn add libGoogleAnalytics.a</code> ，回车</p>
<p>之后会出现：A (bin) libGoogleAnalytics.a</p>
<p>表示添加成功，打开 Versions 就可以看到，刚才添加的 .a 文件，此时就可以手动上传了。 </p>
<p>另外，请注意路径的正确性。</p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/11/16/2016-11-16-macTips/" target="_blank" rel="external">点击阅读原文</a>     </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;DS-Store-文件是什么？&quot;&gt;&lt;a href=&quot;#DS-Store-文件是什么？&quot; class=&quot;headerlink&quot; title=&quot;.DS_Store 文件是什么？&quot;&gt;&lt;/a&gt;.DS_Store 文件是什么？&lt;/h3&gt;&lt;p&gt;.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件，如文件的图标位置或背景色，相当于 Windows 的 desktop.ini。&lt;/p&gt;
&lt;p&gt;1，禁止.DS_store 生成：&lt;br&gt;打开 “终端” ，复制黏贴下面的命令，回车执行，重启Mac即可生效。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;defaults write com&lt;span class=&quot;selector-class&quot;&gt;.apple&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.desktopservices&lt;/span&gt; DSDontWriteNetworkStores -bool TRUE&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2，恢复.DS_store生成：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;defaults delete com&lt;span class=&quot;selector-class&quot;&gt;.apple&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.desktopservices&lt;/span&gt; DSDontWriteNetworkStores&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;显示隐藏文件&quot;&gt;&lt;a href=&quot;#显示隐藏文件&quot; class=&quot;headerlink&quot; title=&quot;显示隐藏文件&quot;&gt;&lt;/a&gt;显示隐藏文件&lt;/h3&gt;&lt;p&gt;在终端执行命令，显示隐藏文件&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;defaults write com&lt;span class=&quot;selector-class&quot;&gt;.apple&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.finder&lt;/span&gt; AppleShowAllFiles -bool true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;恢复隐藏&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;defaults write com&lt;span class=&quot;selector-class&quot;&gt;.apple&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.finder&lt;/span&gt; AppleShowAllFiles -bool false&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行命令后需要重新打开能看到效果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="//xiaoshenmao.github.io/blog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow 在 iOS 平台上的使用(一)</title>
    <link href="//xiaoshenmao.github.io/blog/2016/11/03/2016-11-03-TensorFlowOniOSUse1/"/>
    <id>//xiaoshenmao.github.io/blog/2016/11/03/2016-11-03-TensorFlowOniOSUse1/</id>
    <published>2016-11-02T16:00:00.000Z</published>
    <updated>2017-08-22T16:57:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　距离上次使用 TensorFlow 在iOS平台上做的小 Demo，已经过了四个月了，今天忽然想再看看,发现 Demo 已经不见了，我只能从头在编一次，这次发现编译 iOS 库，简单多了。</p>
<p>　　tensorflow <a href="https://github.com/tensorflow/tensorflow/archive/master.zip" target="_blank" rel="external">下载地址</a>，tensorflow 最近提交的时间：2016-11-03，commit：<code>7b7c02de56e013482b5fe5ab05e576dc98fe5742</code> 。</p>
<p>　　下载完成后打开文件，找到目录 <code>tensorflow-master/tensorflow/contrib/ios_examples</code> 你会发现目录下有三个项目和一个 README.md 。</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">benchmark 、 camera 、<span class="built_in"> simple </span>、README.md</div></pre></td></tr></table></figure>
<h3 id="如果你发现项目无法运行，请看这里"><a href="#如果你发现项目无法运行，请看这里" class="headerlink" title="如果你发现项目无法运行，请看这里"></a>如果你发现项目无法运行，请看这里</h3><p>　　对于任何项目我们首先打开的应该是 README.md ，里面一般情况都会有介绍如何使用这个项目，tensorflow 也不会例外。README 开头就说了，这个目录里有如何在 iOS 平台上使用 tensorflow 的例子，但是需要注意几点：</p>
<ul>
<li>你的 Xcode 版本必须是 7.3 或更高版本，并且有安装 command-line 工具 。</li>
<li>项目(Examples) 里必须包含一个静态库：<code>libtensorflow-core.a</code> 。</li>
<li>下载 <a href="https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip" target="_blank" rel="external">Inception v1</a>，解压后将 label 和 graph 放在 simple 和 camera 的项目中。<a id="more"></a> 
<h3 id="camera-项目的使用"><a href="#camera-项目的使用" class="headerlink" title="camera 项目的使用"></a>camera 项目的使用</h3></li>
</ul>
<p>　　camera 项目在 tensorflow-master/tensorflow/contrib/ios_examples 目录下，如果你是直接打开 camera 项目，编译你会发现报错缺少 imagenet_comp_graph_label_strings.txt 和 tensorflow_inception_graph.pb 两个文件，这两个文件上面已经说到了下载 <a href="https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip" target="_blank" rel="external">Inception v1</a> 解压得到。现在还差 静态库：<code>libtensorflow-core.a</code> ，这个需要我们自己编译。</p>
<h4 id="编译静态库：libtensorflow-core-a"><a href="#编译静态库：libtensorflow-core-a" class="headerlink" title="编译静态库：libtensorflow-core.a"></a>编译静态库：libtensorflow-core.a</h4><p>进入目录：tensorflow-master/tensorflow/contrib/makefile，你可以看到一大堆 .sh 结尾的文件，找到 build_all_ios.sh ，Mac 上可以直接在 termina（终端）上运行命令编译</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sh build_all_ios.sh</span></div></pre></td></tr></table></figure>
<p>这个编译的过程是很漫长的，一般在一个小时左右。也有可能你在编译的过程中会遇到问题，这次我只遇到一个问题：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">configure.ac:<span class="number">30</span>: error: required file <span class="string">'build-aux/ltmain.sh'</span> not found</div><div class="line">configure.ac:<span class="number">24</span>: installing <span class="string">'build-aux/missing'</span></div><div class="line">Makefile.am: installing <span class="string">'build-aux/depcomp'</span></div><div class="line">parallel-tests: installing <span class="string">'build-aux/test-driver'</span></div><div class="line">autoreconf: automake failed with <span class="keyword">exit</span> status: <span class="number">1</span></div></pre></td></tr></table></figure>
<p>解决方法是：先卸载 libtool 在重新安装，<code>brew uninstall libtool</code> &amp;&amp; <code>brew install libtool</code></p>
<p>如果你还遇到了其它问题，可以看看我之前的一片文章 <a href="http://baixin.io/2016/07/iOSMachineLearning_TensorFlow/" target="_blank" rel="external">iOS开发迎来机器学习的春天—TensorFlow</a> ，或者是直接去 tensorflow 的 <a href="https://github.com/tensorflow/tensorflow/issues" target="_blank" rel="external">Issues</a> 里面找。 </p>
<p>一个小时后。。。　如果编译没出问题，你可以在目录　<code>tensorflow-master/tensorflow/contrib/makefile／gen/lib</code> 下找到一个静态库：<code>libtensorflow-core.a</code> ，把这个静态库拷贝到 camera 项目中，然后编译运行。</p>
<p><br><br>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/11/03/2016-11-03-TensorFlowOniOSUse1/" target="_blank" rel="external">点击阅读原文</a>     </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　距离上次使用 TensorFlow 在iOS平台上做的小 Demo，已经过了四个月了，今天忽然想再看看,发现 Demo 已经不见了，我只能从头在编一次，这次发现编译 iOS 库，简单多了。&lt;/p&gt;
&lt;p&gt;　　tensorflow &lt;a href=&quot;https://github.com/tensorflow/tensorflow/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;，tensorflow 最近提交的时间：2016-11-03，commit：&lt;code&gt;7b7c02de56e013482b5fe5ab05e576dc98fe5742&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;　　下载完成后打开文件，找到目录 &lt;code&gt;tensorflow-master/tensorflow/contrib/ios_examples&lt;/code&gt; 你会发现目录下有三个项目和一个 README.md 。&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;benchmark 、 camera 、&lt;span class=&quot;built_in&quot;&gt; simple &lt;/span&gt;、README.md&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;如果你发现项目无法运行，请看这里&quot;&gt;&lt;a href=&quot;#如果你发现项目无法运行，请看这里&quot; class=&quot;headerlink&quot; title=&quot;如果你发现项目无法运行，请看这里&quot;&gt;&lt;/a&gt;如果你发现项目无法运行，请看这里&lt;/h3&gt;&lt;p&gt;　　对于任何项目我们首先打开的应该是 README.md ，里面一般情况都会有介绍如何使用这个项目，tensorflow 也不会例外。README 开头就说了，这个目录里有如何在 iOS 平台上使用 tensorflow 的例子，但是需要注意几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你的 Xcode 版本必须是 7.3 或更高版本，并且有安装 command-line 工具 。&lt;/li&gt;
&lt;li&gt;项目(Examples) 里必须包含一个静态库：&lt;code&gt;libtensorflow-core.a&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;下载 &lt;a href=&quot;https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inception v1&lt;/a&gt;，解压后将 label 和 graph 放在 simple 和 camera 的项目中。
    
    </summary>
    
    
      <category term="机器学习" scheme="//xiaoshenmao.github.io/blog/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Xcode 8 使用笔记</title>
    <link href="//xiaoshenmao.github.io/blog/2016/10/25/2016-10-25-Xcode8/"/>
    <id>//xiaoshenmao.github.io/blog/2016/10/25/2016-10-25-Xcode8/</id>
    <published>2016-10-24T16:00:00.000Z</published>
    <updated>2017-08-22T09:55:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用 Xcode8遇到了一些问题，想记下来，发现简书上有位同学写了一篇很详细的教程 <a href="http://www.jianshu.com/p/c1904fd8db06" target="_blank" rel="external">原文链接</a>，比较懒惰的我就在他的基础上加了些我自己的一些笔记。</p>
<h3 id="Interface-Builder"><a href="#Interface-Builder" class="headerlink" title="Interface Builder"></a>Interface Builder</h3><p>随着 14 年的 iPhone6 和 6P 出来之后，iPhone 的屏幕尺寸也越来越多，屏幕适配是一个需要解决的问题，以后不一定苹果又出什么尺寸的 iPhone 呢。</p>
<p>在 iPhone6 和 6P 发布的同一年，苹果推出的 Xcode6 中在原有的 Auto layout的基础上，添加了Size Classes新特性，通过这个新特性可以使用一个XIB或者SB文件，适配不同的屏幕以及iPhone和iPad两种设备。</p>
<p>在 Xcode8 中，苹果推出了更加强大的可视化编辑工具预览功能，可以在不运行App的情况下，预览当前XIB或SB在不同屏幕尺寸下的显示。(这个功能我记得之前Xcode就有，只是隐藏的比较深，苹果现在给拿到外面了)</p>
<p>选择一个XIB文件进去，点击下面红框的位置，会出现从3.5寸-5.5寸一系列屏幕尺寸的选项。直接点击不同屏幕尺寸，以及横竖屏选项，切换不同的屏幕显示。在iPad上还可以选择是否分屏，功能非常强大。</p>
<p><img src="/blog/assets/posts/Xcode8/image1.png" height="200" width="600"> </p>
<p>在右边有一个 Vary for Traits 选项，点击这个选项就可以同时显示所有可选的屏幕样式，功能和上面图片都一样，只是显示上看起来比较多。</p>
<p><img src="/blog/assets/posts/Xcode8/image2.png" height="160" width="600">  </p>
<p>还有一点，新创建的 XIB 控件尺寸，不再是之前 600*600 的方块了，而是默认是6s的长方形 XIB 文件，看起来舒服多了。<br><a id="more"></a> </p>
<h3 id="Target中General-的变化"><a href="#Target中General-的变化" class="headerlink" title="Target中General 的变化"></a>Target中General 的变化</h3><p>在 Xcode8 之前，都需要自己设置证书和描述文件。如果设置出现错误的情况下，还可以通过点击 Fix issue 来修复这个错误。但这有个问题就在于，Fix issue 选项并不是那么好用，有的时候设置是正确的这里也提示需要 Fix issue。</p>
<p>可能苹果也意识到这个问题的存在，在Xcode8中可以通过Automatically manage signing选项，让苹果为我们管理证书和配置文件，设置也都是由苹果来完成的。在Xcode8中新建项目，这个选项默认是被勾选的。</p>
<p><img src="/blog/assets/posts/Xcode8/image3.png" height="350" width="500">  </p>
<p>从上面图中可以看到，苹果帮我们自动管理了证书和配置文件。而且在之前的项目中，如果想要设置安装后显示在手机上的App名字，还需要自己到Info.plist文件中，修改Display Name字段，而现在直接在General中就可以做修改，这个修改和Info.plist是同步的。</p>
<p>但是，如果我想自己管理证书和描述文件呢？只需要去掉Automatically manage signing选项。</p>
<p><img src="/blog/assets/posts/Xcode8/image4.png" height="350" width="500"> </p>
<p>如果自己到Build Settings中手动设置证书和描述文件，可以发现Provisioning Profile选项已经被标明为Deprecated，也就是苹果并不推荐手动设置。</p>
<h3 id="Xcode-插件"><a href="#Xcode-插件" class="headerlink" title="Xcode 插件"></a>Xcode 插件</h3><p>升级 Xcode8 之后会发现，在 Xcode8 中所有第三方插件都失效了，并且连之前菜单栏的插件选项也不存在了。在之前很多 iOS 开发者，都是通过 <a href="http://alcatraz.io/" target="_blank" rel="external">Alcatraz</a> 来管理插件的，现在 Alcatraz 也是不可用的。但是X code8 自身也对编译器进行了升级，将一些比较好的插件功能加入到 Xcode 中，例如单行高亮显示等。</p>
<p>在 Xcode8 中支持了开发插件工程，并且为我们提供了一个插件模板，开发的插件可以上传到App Store 下载。苹果这么做有一个原因在于，之前 Xcode和插件是运行在同一个进程的，所以插件的崩溃也会导致Xcode崩溃。苹果现在将插件作为一个单独的应用程序，分开进程运行，不会对Xcode带来其他影响。</p>
<p><img src="/blog/assets/posts/Xcode8/image5.png" height="350" width="500">  </p>
<h3 id="Runtime-Issues"><a href="#Runtime-Issues" class="headerlink" title="Runtime Issues"></a>Runtime Issues</h3><p>在开发过程中，因为语法或明显的代码错误(例如Retain Cycle)，编译器可以发现并报黄色或红色警告。但是一些因为代码逻辑导致的错误，编译器并没有办法找到。例如下面的这句代码，因为代码逻辑的问题导致两个数组相互引用，都不能释放。</p>
<p><img src="/blog/assets/posts/Xcode8/image6.png" height="180" width="600">  </p>
<p>这时候可以通过 Xcode8 提供的 Runtime Issues 新特性，查找到运行过程中出现的问题，并通过 Graph 的方式将问题可视化的展现给开发者。</p>
<p><img src="/blog/assets/posts/Xcode8/image7.png" height="300" width="600"> </p>
<h3 id="Debug-Memory-Graph"><a href="#Debug-Memory-Graph" class="headerlink" title="Debug Memory Graph"></a>Debug Memory Graph</h3><p>在Xcode6中出现了Debug View Hierarchy新特性，可以通过其调试当前App的视图层级，查找UI相关的bug非常方便。在Xcode8中苹果为开发者提供了Debug Memory Graph特性，通过这个新特性，可以直接选择一个对象，查看与其相关的内存关系。</p>
<p><img src="/blog/assets/posts/Xcode8/image8.png" height="300" width="600"> </p>
<p>Debug Memory Graph 和 Runtime Issues 可以配合使用，通过 Debug Memory Graph 分析内存关系完成后，点击 Runtime Issues 可以看到已经发现的内存问题。</p>
<h3 id="Swift-3"><a href="#Swift-3" class="headerlink" title="Swift 3"></a>Swift 3</h3><p>Xcode8 带来了新版本的 Swift3，新版本的Swift变化较大，如果旧版的Swift项目在Xcode8上编译可能会失败。对此，苹果为开发者提供了Swift迁移工具，听说不太好用(我没用过这个工具)。</p>
<p>如果不想立刻就迁移到Swift3，可以在Builder Settings中进行设置，选择Use Legacy Swift Language Version设置为YES，就可以继续使用旧版本的Swift2.3。</p>
<p><img src="/blog/assets/posts/Xcode8/image9.png" height="300" width="600">   </p>
<h3 id="其他更新"><a href="#其他更新" class="headerlink" title="其他更新"></a>其他更新</h3><p>Xcode 新版字体，SF Mono Regular 字体。更新 Xcode 之后我比较喜欢这种字体，看起来代码非常工整。<br>被编辑的行高亮显示。之前Xcode有个插件就是这个功能，Xcode8把高亮功能集成进来了，使用起来很方便。<br>最新版的API文档，展示样式发生了很大的改变。<br>更方便的生成文档(就是喵神写的VVDocumenter)，在Xcode8中可以将光标放在方法上面，通过option + command + /快捷键生成文档注释。</p>
<h3 id="Xcode8适配-XIB和Storeboard适配"><a href="#Xcode8适配-XIB和Storeboard适配" class="headerlink" title="Xcode8适配,XIB和Storeboard适配"></a>Xcode8适配,XIB和Storeboard适配</h3><p>在 Xcode8 之前，创建一个 XIB 或 SB 文件，都是一个 600*600 的方块 XIB 文件。在 Xcode8 之后，创建的 XIB 文件默认是6s尺寸的大小。</p>
<p>但是 Xcode8 打开之前旧项目的 XIB或SB 文件时，会弹出下面的弹框， 这时候一般直接选择Choose Device即可。</p>
<p><img src="/blog/assets/posts/Xcode8/image10.png" height="300" width="500">  </p>
<p>但是这样有个问题，如果Xcode8打开过这个XIB文件，并选择Choose Device之后。其他的Xcode8以下版本的编译器，将无法再打开这个文件，会报以下错误：</p>
<p>The document “ViewController.xib” requires Xcode 8.0 or later. This version does not support documents saved in the Xcode 8 format. Open this document with Xcode 8.0 or later.<br>有两种方法解决这个问题：</p>
<p>你同事也升级Xcode8，比较推荐这种方式，应该迎接改变。<br>右击XIB或SB文件 -&gt; Open as -&gt; Source Code，删除xml文件中下面一行字段。</p>
<capability name="documents saved in the Xcode 8 format" mintoolsversion="8.0">

<h3 id="编译错误"><a href="#编译错误" class="headerlink" title="编译错误"></a>编译错误</h3><p>升级Xcode之后，Xcode8对之前的一些修饰符和语句不兼容，会导致一些编译错误。这种错误导致的原因很多，这里大致列几条，各位还是根据自身遇到的情况做修改吧。</p>
<p>之前一些泛型相关的修饰符，nullable之类的有的会报错。<br>CAAnimation及其子类，设置代理属性后，必须在@interface()遵守代理，否则报错，等等。</p>
<h3 id="权限适配"><a href="#权限适配" class="headerlink" title="权限适配"></a>权限适配</h3><p>这应该算iOS10系统适配的范畴，最近这两个都在弄，所以就直接和Xcode8适配一起写出来了。</p>
<p>在iOS10之后需要在Info.plist中，添加新的字段获取权限，否则在iOS10上运行会导致崩溃。下面是一些常用的字段，如果有缺少的麻烦各位评论区补充一下。</p>
<p>Key    权限<br>Privacy - Camera Usage Description    相机<br>Privacy - Microphone Usage Description    麦克风<br>Privacy - Photo Library Usage Description    相册<br>Privacy - Contacts Usage Description    通讯录<br>Privacy - Bluetooth Peripheral Usage Description    蓝牙<br>Privacy - Location When In Use Usage Description    定位<br>Privacy - Location Always Usage Description    后台定位<br>Privacy - Calendars Usage Description    日历</p>
<p>参考资料：<a href="https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html" target="_blank" rel="external">developer.apple</a></p>
<h3 id="推送通知"><a href="#推送通知" class="headerlink" title="推送通知"></a>推送通知</h3><p>苹果的推送在之前iOS8和iOS9的时候就发生过大的更新，推送功能越来越强大。在iOS10之后苹果推出了UserNotifications框架，可以通过这个框架更好的控制推送通知，可以更新、修改锁屏页面的推送消息，可以添加图片等功能。</p>
<p>但是在用Xcode8打包后，并且不对代码进行修改的情况下，会发现打包后苹果发来了一封邮件。这封邮件大概意思是如果需要使用推送通知，需要对代码做修改，否则将不能使用推送通知。</p>
<p><img src="/blog/assets/posts/Xcode8/image11.png" height="300" width="600">  </p>
<p>这是因为在Xcode8之后，如果需要使用Push Notifications的功能，需要勾选Capabilities -&gt; Push Notifications为YES，否则进行远程推送就会有问题，并且会收到苹果发来的这封邮件。</p>
<h3 id="删除系统log"><a href="#删除系统log" class="headerlink" title="删除系统log"></a>删除系统log</h3><p>升级Xcode8之后，在调试和运行过程中，发现控制台打印了很多不认识的log，这些log是系统打印的，和开发者没关系。但是这么多log看着比较乱，怎么屏蔽掉呢？</p>
<p>subsystem: com.apple.UIKit, category: HIDEventFiltered, enable_level: 0, persist_level: 0, default_ttl: 0, info_ttl: 0, debug_ttl: 0, generate_symptoms: 0, enable_oversize: 1, privacy_setting: 2, enable_private_data: 0<br>在Target -&gt; Edit Scheme -&gt; Run -&gt; Arguments中，添加OS_ACTIVITY_MODE字段，并设置为Disable即可。</p>
<p><img src="/blog/assets/posts/Xcode8/image12.png" height="300" width="500">   </p>
<p>顺便提一下，这两天在设置log选项的时候，发现可以通过在Arguments中设置参数，打印出App加载的时长，包括整体加载时长，动态库加载时长等。</p>
<p>在Environment Variables中添加DYLD_PRINT_STATISTICS字段，并设置为YES，在控制台就会打印加载时长。</p>
<p><img src="/blog/assets/posts/Xcode8/image13.png" height="300" width="600">  </p>
<h3 id="awakeFromNib报警告"><a href="#awakeFromNib报警告" class="headerlink" title="awakeFromNib报警告"></a>awakeFromNib报警告</h3><p>老项目在Xcode8中，有些重写awakeFromNib方法的地方，会报下面的错误。这是因为没有调用super的方法导致的，还好我平时都是调用super的，我代码目前还没出问题。</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">Method</span> <span class="title">possibly</span> <span class="title">missing</span> <span class="title">a</span> [<span class="title">super</span> <span class="title">awakeFromNib</span>] <span class="title">call</span></span></div></pre></td></tr></table></figure>
</capability>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近使用 Xcode8遇到了一些问题，想记下来，发现简书上有位同学写了一篇很详细的教程 &lt;a href=&quot;http://www.jianshu.com/p/c1904fd8db06&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;，比较懒惰的我就在他的基础上加了些我自己的一些笔记。&lt;/p&gt;
&lt;h3 id=&quot;Interface-Builder&quot;&gt;&lt;a href=&quot;#Interface-Builder&quot; class=&quot;headerlink&quot; title=&quot;Interface Builder&quot;&gt;&lt;/a&gt;Interface Builder&lt;/h3&gt;&lt;p&gt;随着 14 年的 iPhone6 和 6P 出来之后，iPhone 的屏幕尺寸也越来越多，屏幕适配是一个需要解决的问题，以后不一定苹果又出什么尺寸的 iPhone 呢。&lt;/p&gt;
&lt;p&gt;在 iPhone6 和 6P 发布的同一年，苹果推出的 Xcode6 中在原有的 Auto layout的基础上，添加了Size Classes新特性，通过这个新特性可以使用一个XIB或者SB文件，适配不同的屏幕以及iPhone和iPad两种设备。&lt;/p&gt;
&lt;p&gt;在 Xcode8 中，苹果推出了更加强大的可视化编辑工具预览功能，可以在不运行App的情况下，预览当前XIB或SB在不同屏幕尺寸下的显示。(这个功能我记得之前Xcode就有，只是隐藏的比较深，苹果现在给拿到外面了)&lt;/p&gt;
&lt;p&gt;选择一个XIB文件进去，点击下面红框的位置，会出现从3.5寸-5.5寸一系列屏幕尺寸的选项。直接点击不同屏幕尺寸，以及横竖屏选项，切换不同的屏幕显示。在iPad上还可以选择是否分屏，功能非常强大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/assets/posts/Xcode8/image1.png&quot; height=&quot;200&quot; width=&quot;600&quot;&gt; &lt;/p&gt;
&lt;p&gt;在右边有一个 Vary for Traits 选项，点击这个选项就可以同时显示所有可选的屏幕样式，功能和上面图片都一样，只是显示上看起来比较多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/assets/posts/Xcode8/image2.png&quot; height=&quot;160&quot; width=&quot;600&quot;&gt;  &lt;/p&gt;
&lt;p&gt;还有一点，新创建的 XIB 控件尺寸，不再是之前 600*600 的方块了，而是默认是6s的长方形 XIB 文件，看起来舒服多了。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="//xiaoshenmao.github.io/blog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS设备左下角出现Appicon</title>
    <link href="//xiaoshenmao.github.io/blog/2016/09/23/2016-09-23-iOSLowerLeftAppicon/"/>
    <id>//xiaoshenmao.github.io/blog/2016/09/23/2016-09-23-iOSLowerLeftAppicon/</id>
    <published>2016-09-22T16:00:00.000Z</published>
    <updated>2017-08-22T16:57:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现我设备锁屏后，按Home屏幕变亮的时候，左下角出现一个灰色的Appicon （应用图标），关于这个应用图标的出现做了一些调研，下面是应用图标出现的几种情况。</p>
<p>图一 iOS 系统自带的 App icon , 图二 第三方 App icon , 图三 通过 iBeacon 信号激活的 demo icon</p>
<p><img src="/blog/assets/posts/icon/image01.png" alt=""></p>
<h2 id="结论：有三种情况导致设备的左下角出现灰色的-App-icon"><a href="#结论：有三种情况导致设备的左下角出现灰色的-App-icon" class="headerlink" title="结论：有三种情况导致设备的左下角出现灰色的 App icon"></a>结论：有三种情况导致设备的左下角出现灰色的 App icon</h2><h3 id="1、AppStore根据地点对App-推荐"><a href="#1、AppStore根据地点对App-推荐" class="headerlink" title="1、AppStore根据地点对App 推荐"></a>1、AppStore根据地点对App 推荐</h3><ul>
<li><strong>简介</strong> <ul>
<li>iOS 8会基于你的位置在锁屏界面上展示一个app快捷打开方式。比如你正在星巴克附近，那iOS 8会在锁屏界面上展示星巴克应用的icon，方便你快速打开。一些用户也表示会在锁屏界面收到app推荐，比如你在Costco和Apple Store附近，即便你之前没有安装过这些应用。   </li>
</ul>
</li>
</ul>
<h3 id="2、App实现了handoff功能"><a href="#2、App实现了handoff功能" class="headerlink" title="2、App实现了handoff功能"></a>2、App实现了handoff功能</h3><ul>
<li><strong><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html" target="_blank" rel="external">handoff简介</a>：</strong><ul>
<li><code>OS X 10.10 Yosemite</code> 新增了一个酷炫的功能 “Hand Off”，打开这个功能之后，用户可以在 Mac 上对 iPad 和 iPhone 进行操作，比如能够编写 iPhone 上未完成的邮件，并且可以在Mac上打开 iPhone 的热点等等， Mac 的 Hand Off 功能只能识别 Mac 周围的 iPhone 手机。      </li>
</ul>
</li>
<li><strong>handoff有几个要求：</strong><ul>
<li>1 两台设备都要登录同一个 iCloud 账号。</li>
<li>2 两台设备上的app有相同的 TeamID 。</li>
<li>3 锁屏（或dock）设备上的app支持的 <code>NSUserActivityTypes</code> 包含活动设备上的app当前的UserActivityType。<a id="more"></a> 
<h3 id="3、App内有iBeacon信号接收功能，App被iBeacon信号唤醒"><a href="#3、App内有iBeacon信号接收功能，App被iBeacon信号唤醒" class="headerlink" title="3、App内有iBeacon信号接收功能，App被iBeacon信号唤醒"></a>3、App内有iBeacon信号接收功能，App被iBeacon信号唤醒</h3></li>
</ul>
</li>
<li><strong><a href="https://developer.apple.com/ibeacon/" target="_blank" rel="external">iBeacon简介</a></strong>：<ul>
<li>是苹果公司2013年9月发布的移动设备用OS（iOS7）上配备的新功能。工作原理类似之前的蓝牙技术，由 <code>iBeacon</code> 发射信号，iOS设备定位接受，反馈信号。根据这项简单的定位技术可以做出许多的相应技术应用,如：<code>室内定位</code> 、<code>商品推荐</code> 、<code>微信摇一摇</code> 等。</li>
</ul>
</li>
<li><strong>App icon出现的原因</strong>：<ul>
<li><code>iBeacon</code> 具备后台定位的能力，只要用户把蓝牙(4.0或以后)开启 和 允许 App 访问位置信息。在有被 App 检测的 <code>iBeacon</code> 出现时，如果设备是锁屏状态，设备的左下角就会出现该 App 的 icon 。</li>
</ul>
</li>
</ul>
<p>参考链接:<br><a href="http://stackoverflow.com/questions/26082414/make-app-appear-as-ios-8-suggested-app-at-lockscreen/26676020#26676020" target="_blank" rel="external">Make app appear as iOS 8 Suggested App at lockscreen</a><br><a href="http://stackoverflow.com/questions/25897219/can-i-get-my-ios-app-to-appear-on-the-lower-left-corner-of-the-lock-screen/25898890#25898890" target="_blank" rel="external">Can I get my iOS app to appear on the lower left corner of the lock screen?</a><br><a href="https://www.zhihu.com/question/26653964" target="_blank" rel="external">为什么 iOS 8 锁屏界面的左下角经常会出现某个应用的小图标？</a><br><a href="https://www.v2ex.com/t/142320" target="_blank" rel="external">关于 IOS8 锁屏左下方出现的 APP ICON</a> </p>
<p><br></p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的微博</a> » <a href="https://xiaoshenmao.github.io/blog/2016/09/23/2016-09-23-iOSLowerLeftAppicon/" target="_blank" rel="external">点击阅读原文</a>     </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现我设备锁屏后，按Home屏幕变亮的时候，左下角出现一个灰色的Appicon （应用图标），关于这个应用图标的出现做了一些调研，下面是应用图标出现的几种情况。&lt;/p&gt;
&lt;p&gt;图一 iOS 系统自带的 App icon , 图二 第三方 App icon , 图三 通过 iBeacon 信号激活的 demo icon&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/assets/posts/icon/image01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;结论：有三种情况导致设备的左下角出现灰色的-App-icon&quot;&gt;&lt;a href=&quot;#结论：有三种情况导致设备的左下角出现灰色的-App-icon&quot; class=&quot;headerlink&quot; title=&quot;结论：有三种情况导致设备的左下角出现灰色的 App icon&quot;&gt;&lt;/a&gt;结论：有三种情况导致设备的左下角出现灰色的 App icon&lt;/h2&gt;&lt;h3 id=&quot;1、AppStore根据地点对App-推荐&quot;&gt;&lt;a href=&quot;#1、AppStore根据地点对App-推荐&quot; class=&quot;headerlink&quot; title=&quot;1、AppStore根据地点对App 推荐&quot;&gt;&lt;/a&gt;1、AppStore根据地点对App 推荐&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简介&lt;/strong&gt; &lt;ul&gt;
&lt;li&gt;iOS 8会基于你的位置在锁屏界面上展示一个app快捷打开方式。比如你正在星巴克附近，那iOS 8会在锁屏界面上展示星巴克应用的icon，方便你快速打开。一些用户也表示会在锁屏界面收到app推荐，比如你在Costco和Apple Store附近，即便你之前没有安装过这些应用。   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2、App实现了handoff功能&quot;&gt;&lt;a href=&quot;#2、App实现了handoff功能&quot; class=&quot;headerlink&quot; title=&quot;2、App实现了handoff功能&quot;&gt;&lt;/a&gt;2、App实现了handoff功能&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;handoff简介&lt;/a&gt;：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OS X 10.10 Yosemite&lt;/code&gt; 新增了一个酷炫的功能 “Hand Off”，打开这个功能之后，用户可以在 Mac 上对 iPad 和 iPhone 进行操作，比如能够编写 iPhone 上未完成的邮件，并且可以在Mac上打开 iPhone 的热点等等， Mac 的 Hand Off 功能只能识别 Mac 周围的 iPhone 手机。      &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;handoff有几个要求：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;1 两台设备都要登录同一个 iCloud 账号。&lt;/li&gt;
&lt;li&gt;2 两台设备上的app有相同的 TeamID 。&lt;/li&gt;
&lt;li&gt;3 锁屏（或dock）设备上的app支持的 &lt;code&gt;NSUserActivityTypes&lt;/code&gt; 包含活动设备上的app当前的UserActivityType。
    
    </summary>
    
    
      <category term="iOS" scheme="//xiaoshenmao.github.io/blog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Python自动化测试iOS项目</title>
    <link href="//xiaoshenmao.github.io/blog/2016/08/04/2016-08-04-PythonTestAutomationiOS/"/>
    <id>//xiaoshenmao.github.io/blog/2016/08/04/2016-08-04-PythonTestAutomationiOS/</id>
    <published>2016-08-03T16:00:00.000Z</published>
    <updated>2017-08-22T16:58:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个开发人员，为了保证自己的代码的健壮，写单元测试是必不可少的环节，然而最痛快的是每天去手动跑一遍所有的case。那么什么能帮我们解决这些繁琐的操作呢，大家应该会想到自动化测试脚本了，是的，我们可以借助脚本来完成全自动化测试，下面是我列的每天脚本自动执行流程：       </p>
<blockquote>
<ul>
<li>1、<code>pull</code> git仓库里面的最新代码到本地。    </li>
<li>2、然后打包成<code>App</code>。   </li>
<li>3、安装到模拟器上。    </li>
<li>4、运行App，执行单元测试，生成测试数据并保存到本地。    </li>
<li>5、脚本读取测试数据，邮件发送给相关人员。    </li>
</ul>
</blockquote>
<p>当这些全自动化后，可以大大减少开发人员的维护成本，即使每次项目里面有新增模块后，增加测试case就行了，下面会介绍自动测试这5步具体怎么去执行，整个脚本是使用Python写的，代码很少功能也很简单，但这已经可以帮我们完成基本的自动化测试了，这就是脚本的强大之处，选择Pyhton纯属个人喜好，最近也在学习Python，当然了最终使用什么语言看你自己。   </p>
<h3 id="python执行shell命令完成测试"><a href="#python执行shell命令完成测试" class="headerlink" title="python执行shell命令完成测试"></a>python执行shell命令完成测试</h3><p>首先确认本机上安装了<code>git</code> 和 <code>python</code> 。<br>脚本判断本地是否存在项目，不存在则使用命令 <code>git clone ...</code> ，存在则使用命令 <code>git pull ...</code> 。<br>这些在Linux的命令都可以使用脚本来完成的，python的 <code>os.popen()</code> 方法 就是可以在Linux上执行shell命令。<br><strong>例如：</strong>  把下面这段代码添加到一个 test.py 的文件里，然后在终端上执行 <code>python test.py</code> 命令你就会看到，你的当前目录下正在下载我的博客了。<br><a id="more"></a> </p>
<pre><code>import os

os.popen(&apos;git clone https://github.com/leopardpan/leopardpan.github.io.git&apos;)
</code></pre><p>git pull 。。。 更新代码也是一样的。</p>
<p>接下来的打包、安装、运行都是使用python执行shell命令      </p>
<p><strong>把iOS项目打包成App，下面的 <code>Demo</code> 是项目的名字</strong>              </p>
<blockquote>
<ul>
<li>os.popen(‘xcodebuild -project Demo.xcodeproj -target Demo -configuration Debug -sdk iphonesimulator’)     </li>
</ul>
</blockquote>
<p>这行脚本运行完成后，你就会发现同会生成一个 <code>build</code> 的文件夹。<br>Debug参数表示现在是Debug模式，如果Xcode里面改成Release了，这里需要改成Release。<br>xcodebuild 命令是 Xcode Command Line Tools 的一部分。通过调用这个命令，可以完成 iOS 工程的编译，打包和签名过程。可以使用 xcodebuild –help 来看看具体有哪些功能。 </p>
<p><strong>打开iOS模拟器，这里运行的是<code>iPhone 6 Plus</code> 你也可以换成其它型号的模拟器</strong>      </p>
<blockquote>
<ul>
<li>os.popen(‘xcrun instruments -w “iPhone 6 Plus”‘)    </li>
</ul>
</blockquote>
<p><strong>把刚才打包生成的App安装到模拟器上</strong><br>在安装之前要先卸载App,不然你运行的永远是最初安装的那个，后来安装的不会覆盖之前的，卸载App</p>
<blockquote>
<ul>
<li>os.popen(‘xcrun simctl uninstall booted com.test.Demo’)</li>
</ul>
</blockquote>
<p>booted 后面接的是 <code>Bundle Identifier</code>，我的是 com.test.Demo，然后再安装App     </p>
<blockquote>
<ul>
<li>os.popen(‘xcrun simctl install booted build/Debug-iphonesimulator/Demo.app ‘)    </li>
</ul>
</blockquote>
<p>booted 后面接的是.app的路径，我打包的时候的是Debug，所以这个的文件夹名称是Debug-iphonesimulator。</p>
<p><strong>在模拟器里运行App</strong>      </p>
<blockquote>
<ul>
<li>os.popen(‘xcrun simctl launch booted com.test.Demo’)</li>
</ul>
</blockquote>
<p>booted 后面接的是 <code>Bundle Identifier</code>，我的是 com.test.Demo。</p>
<p>到目前为止，你就会发现你的项目已经运行起来了，你可以在项目是Debug模式下一启动就执行单元测试，然后把对应的测试数据保存到本地为data.json。然后在使用python脚本读取测试文件的数据，最终使用邮件发送给相关人员，pyhton读取数据很简单，一行代码就行</p>
<blockquote>
<ul>
<li>data = open(‘data.json’).read() </li>
</ul>
</blockquote>
<p>data里面就是json字符串，为了脚本操作简单，我在存储的时候直接把json格式的转成了字符串类型。</p>
<h3 id="python发送邮件"><a href="#python发送邮件" class="headerlink" title="python发送邮件"></a>python发送邮件</h3><p>我使用的是SMTP进行邮件发送的，SMTP是发送邮件的协议，Python内置对SMTP的支持，可以发送纯文本邮件、HTML邮件以及带附件的邮件。     </p>
<p>Python对SMTP支持有smtplib和email两个模块，email负责构造邮件，smtplib负责发送邮件，具体代码如下： </p>
<pre><code>from email import encoders
from email.header import Header
from email.mime.text import MIMEText
from email.utils import parseaddr, formataddr
import smtplib

def format_addr(self,s):
    name, addr = parseaddr(s)
    return formataddr(( \
        Header(name, &apos;utf-8&apos;).encode(), \
        addr.encode(&apos;utf-8&apos;) if isinstance(addr, unicode) else addr))

def send_mail(self, mail, message, title):
    from_addr = &apos;leopardpan@163.com&apos;
    password = &apos;&apos;
    to_addr = mail
    smtp_server = &apos;smtp.163.com&apos;

    msg = MIMEText(message, &apos;plain&apos;, &apos;utf-8&apos;)
    msg[&apos;From&apos;] = self.format_addr(u&apos;自动化测试邮件 &lt;%s&gt;&apos; % from_addr)
    msg[&apos;To&apos;] = self.format_addr(u&apos;管理员 &lt;%s&gt;&apos; % to_addr)
    msg[&apos;Subject&apos;] = Header(title, &apos;utf-8&apos;).encode()

    server = smtplib.SMTP(smtp_server, 25)
    server.set_debuglevel(1)
    server.login(from_addr, password)
    server.sendmail(from_addr, [to_addr], msg.as_string())
    server.quit()

send_mail(&apos;leopardpan@icloud.com&apos;,&apos;正文&apos;,&apos;标题&apos;)
</code></pre><p>from_addr是发送方的邮箱地址，password是开通SMTP时输入的密码<br>smtp_server是smtp的服务，如果你的from_addr是gamil.com，那么就要写成smtp_server = ‘smtp.gmail.com’ 了。</p>
<p>方法 send_mail(self, mail, message, title): 有四个参数，第一个不用传，第二个参数是收信人的邮箱，第三个是邮件的正文，第四个是邮件的标题，方法调用格式： <code>send_mail(&#39;leopardpan@icloud.com&#39;,&#39;正文&#39;,&#39;标题&#39;)</code></p>
<p>注意：发送方的邮箱必须要开通SMTP功能才行，否则会报错</p>
<blockquote>
<ul>
<li>SMTPSenderRefused: (550, ‘User has no permission’, ‘leopardpan@163.com’)</li>
</ul>
</blockquote>
<p>163的SMTP开通，需要你登录网易邮箱，然后点击顶部的设置就会出现<code>POP3/SMTP/IMAP</code>，点击之后，勾选选择开启，这个时候需要你输入密码，记住这个密码就是上面代码中的<code>password</code>，如果你都完成的话，你把上面的代码拷贝出现，把邮箱修改成你自己的，使用 pyhton 运行一下吧。</p>
<p>上面的几个流程结合起来就可以实现一个简单的自动化测试了，如果你有什么建议和意见欢迎讨论。</p>
<p>参考链接：<br><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832745198026a685614e7462fb57dbf733cc9f3ad000" target="_blank" rel="external">SMTP发送邮件</a>     </p>
<p><br></p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/08/04/2016-08-04-PythonTestAutomationiOS/" target="_blank" rel="external">点击阅读原文</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个开发人员，为了保证自己的代码的健壮，写单元测试是必不可少的环节，然而最痛快的是每天去手动跑一遍所有的case。那么什么能帮我们解决这些繁琐的操作呢，大家应该会想到自动化测试脚本了，是的，我们可以借助脚本来完成全自动化测试，下面是我列的每天脚本自动执行流程：       &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1、&lt;code&gt;pull&lt;/code&gt; git仓库里面的最新代码到本地。    &lt;/li&gt;
&lt;li&gt;2、然后打包成&lt;code&gt;App&lt;/code&gt;。   &lt;/li&gt;
&lt;li&gt;3、安装到模拟器上。    &lt;/li&gt;
&lt;li&gt;4、运行App，执行单元测试，生成测试数据并保存到本地。    &lt;/li&gt;
&lt;li&gt;5、脚本读取测试数据，邮件发送给相关人员。    &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;当这些全自动化后，可以大大减少开发人员的维护成本，即使每次项目里面有新增模块后，增加测试case就行了，下面会介绍自动测试这5步具体怎么去执行，整个脚本是使用Python写的，代码很少功能也很简单，但这已经可以帮我们完成基本的自动化测试了，这就是脚本的强大之处，选择Pyhton纯属个人喜好，最近也在学习Python，当然了最终使用什么语言看你自己。   &lt;/p&gt;
&lt;h3 id=&quot;python执行shell命令完成测试&quot;&gt;&lt;a href=&quot;#python执行shell命令完成测试&quot; class=&quot;headerlink&quot; title=&quot;python执行shell命令完成测试&quot;&gt;&lt;/a&gt;python执行shell命令完成测试&lt;/h3&gt;&lt;p&gt;首先确认本机上安装了&lt;code&gt;git&lt;/code&gt; 和 &lt;code&gt;python&lt;/code&gt; 。&lt;br&gt;脚本判断本地是否存在项目，不存在则使用命令 &lt;code&gt;git clone ...&lt;/code&gt; ，存在则使用命令 &lt;code&gt;git pull ...&lt;/code&gt; 。&lt;br&gt;这些在Linux的命令都可以使用脚本来完成的，python的 &lt;code&gt;os.popen()&lt;/code&gt; 方法 就是可以在Linux上执行shell命令。&lt;br&gt;&lt;strong&gt;例如：&lt;/strong&gt;  把下面这段代码添加到一个 test.py 的文件里，然后在终端上执行 &lt;code&gt;python test.py&lt;/code&gt; 命令你就会看到，你的当前目录下正在下载我的博客了。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="//xiaoshenmao.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>老司机带你剖析无码统计</title>
    <link href="//xiaoshenmao.github.io/blog/2016/07/15/2016-07-15-Codeless/"/>
    <id>//xiaoshenmao.github.io/blog/2016/07/15/2016-07-15-Codeless/</id>
    <published>2016-07-14T16:00:00.000Z</published>
    <updated>2017-08-22T16:58:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　无需开发介入，也可以统计移动App上按钮的点击次数，简称 <code>无码统计</code> ，只要是跟App开发相关的同学，相信都对埋点统计有些了解，特别是针对开发人员来说，做代码埋点统计基本上是看不到直接收益也是开发人员最不愿做的一件事，这篇文章讲的就是如何让开发人员摆脱代码埋点的痛苦。</p>
<p>　　文章主要分为：使用场景、实现原理、适用范围、使用详情四个模块，不管你是产品，还是开发人员又或者是运营人员都适合读这篇文章。  </p>
<p>　　在App开发过程中我们应该都有过类似的需求：想统计某些按钮的点击次数。例如，我们开发了一个注册模块，注册流程有些复杂，整个注册功能开发完成后，我们想知道到底有没有用户使用注册功能，而又有多少用户使用？         </p>
<p>有什么方式能知道呢？</p>
<blockquote>
<ul>
<li><p>后台看注册系统?<br>　有些麻烦，需要后台去数据库里查看，还要做成数据可视化的才方便看。      </p>
</li>
<li><p>查看注册按钮的点击情况?<br>　这是最直观的。 主看看两块就行，注册按钮的点击次数 和 提交注册按钮的点击次数，如果发现注册按钮被点击多次（如1W次），而提交注册的点击次数却只有几次，这就可以反映出，很多用户看到的我们的注册流程太复杂，然后选择放弃注册了。同样的道理，我们通过同样的方式可以验证我们其它的功能模块是否有用户经常使用，从而来重新规划我们的设计需求。         </p>
</li>
</ul>
</blockquote>
<p>　　一整个功能模块的完成涉及到 产品、UI设计、开发、测试 等几个部分，资源和人力的消耗还是挺大的，所以我们在开发过程是否继续维护这些功能模块，还是开发新功能是要经过慎重衡量，而衡量这些最有说服力的依据就是用户的使用数据，这些数据来源是刚才说的 按钮的点击次数，页面的停留时长 等等。<br><a id="more"></a> </p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>　　分析用户App的使用情况当然是直接用数据说话，那么想知道某些按钮的点击次数，就一定需要App的开发人员去具体的按钮点击方法里面埋点才行，有的公司有自己的一套完整的统计埋点系统，有的公司是使用第三方统计，最终都是可以看到按钮的点击次数的，不管怎么样想知道按钮的点击必须要App的开发人员亲自去写代码埋点才行，而这篇文章主要讲的是 <code>无码统计</code> 按钮点击次数。也就是不需要开发介入，我们就能知道按钮的点击了，开发人员只要负责他的业务开发就行，下面是一张 <code>传统埋点</code> 统计和 <code>灵动分析</code> 统计，灵动是TalkingData的SDK无码统计的一个功能。</p>
<p><img src="/blog/assets/posts/codeless/image01.png" height="300" width="600">  </p>
<p>先大致讲下左边 <code>传统</code> 埋点统计流程</p>
<blockquote>
<ul>
<li><p>首先需要制定埋点需求、设计埋点方案，需求有了后就去找开发沟通，埋点需求的讨论，双方确认需求通过后，然后准备需求文档，开发再根据文档来写具体的埋点代码。 </p>
</li>
<li><p>代码写完后，App打包给测试人员，测试人员进行测试，同时还要对埋点参数的数据安全审核，参数是否有包含公司敏感信息。</p>
</li>
<li><p>测试通过后就需要上线了，这个过程一般是开发人员去完成的。iOS需要提交到AppStore上，以前大家都知道，一个审核周期就是一两周，还有随时被拒的可能，现在虽然周期变短了，但审核也还是挺严格的（走快捷通道的除外）。Android需要在各个渠道上重新发布，也是很麻烦的。</p>
</li>
<li><p>如果前面几部都顺利完成了的话，接下来就等待用户更新了，如果埋点统计功能跟其它新功能一起上线的话，我们更新就有理由了，如果仅仅这一版仅仅只是埋点统计功能，那么让用户更新App的理由又是一件头疼的事情了，不管怎么样经常让用户更新App多少会对用户用些影响的。</p>
</li>
<li><p>最终的结果应该是部分用户更新了App，那么我们能统计到按钮点击的用户了就只是更新了App的这一部分用户了，而且他们更新的时间是不一样的，最终我们终于可以看需求上的埋点统计了。</p>
</li>
</ul>
</blockquote>
<p>再看看右边 <code>灵动</code> 统计流程</p>
<p>同样需要制定需求，但是需求方可以直接根据自己的需求去使用 <code>灵动</code> 了，使用了灵动就可以直接看按钮的点击率了，这个过程不需要开发介入，也不需要用户去更新App。</p>
<p>　　从这张图可以看出，不需要开发人员介入，可以开发成功，提高开发效率，而且埋点也很灵活，需求人员（可以是产品，也可以是运营）可以直接使用灵动，也不需要用户更新，那么数据反馈会比传统埋点快很多，使用了就可以立即生效，需求方的观察周期也缩短了，能更灵活的做出决策。</p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>　　上面大致介绍了下 <code>灵动</code> 能给我们解决什么问题，这里讲的是 <code>灵动</code> 是通过什么样的技术手段实现，这里可能对于开发人员来说更喜欢，大家先看一张灵动使用时的一个交互</p>
<p><img src="/blog/assets/posts/codeless/image02.png" height="300" width="500">  </p>
<p>　　这张图分成两部分看，先看上面，一个用户在操作Client和PC，Client和PC通讯是通过一个Wss的服务器建立的长连接，这是灵动调试时的一个交互。<br>　　也就是说，用户使用灵动分析时，需要一个安装自己App的移动设备，这个App必须要集成TalkingData的统计分析SDK才行，SDK初始化时的AppID是在TalkingData创建应用时分配的。另一端用户要打开TalkingData的灵动网页，在App启动的时候摇一摇手机，然后就可以建立一个wss的长连接了。用户就可以直接在网页上给按钮添加监听事件了，添加完成后，在手机上点击该按钮，网页上就会提示被点击，调试完成后点击全部生效，配置数据就会保存到下面https的服务器。<br>　　我们的所有用户在启动App的时候，都可以从https服务器里获取到这套配置，客户端根据这套配置找到具体的按钮，监听点击事件，当按钮被点击后，就可以统计到了。</p>
<p>接下来再看看灵动调试过程中数据是具体怎么进行数据交互的。</p>
<p><img src="/blog/assets/posts/codeless/image03.png" height="300" width="500"> </p>
<p>　　可以看到App客户端和Web端交互主要分为四部分：<code>设备信息</code> 、 <code>App基本结构</code> 、<code>控件绑定配置</code> 、<code>按钮点击信息</code> ，<code>设备信息</code> 主要是用来确认设备是调试者的设备，因为其它的终端用户也可能会误触发调试，<code>App基本结构</code>是用来在Web上展示移动App的，然后在Web上绑定了控件，就会把<code>控件绑定配置</code>发送给客户端，客户端根据配置监听绑定，当终端用户点击控件后，客户端就会把<code>按钮点击信息</code>传给Web端，Web显示控件被点击。</p>
<p>　　再回头看看实现原理的第一张图片，调试完成数据就会从WSS的长连接服务器存储到HTTPS的服务器，此后其它终端用户只要在再次启动App就能获取到埋点配置了，SDK根据埋点配置去找到具体的控件(按钮)，监听点击，当用户点击控件时就可以调用自定义埋点的方法，之后的数据处理就跟自定义埋点是一样的原理了。<br>　　可能有同学会有疑问，所有的App每次启动的时候都会去获取埋点配置，是不是会很耗流量？ 答案是不会的，服务器在没有埋点配置的时候每次将获取不到信息，那么将不会有什么流量消耗。如果服务器有配置了，App才会有些流量消耗的，而且这些配置信息是经过压缩的，所以流量消耗也不大，App获取到了配置之后就会做本地缓存，服务器配置不变的情况下再次获取配置也不会有流量的消耗，只有在下一次运营人员修改了新的控件绑定时才会消耗一些流量。 所以整个无码统计对终端用户的流量的影响是很小的。<br>　　你也可以参考这套逻辑试试自己也部署这么一套无码统计，之后就不用再担心运营给的埋点统计需求了，让他们自己去用无码统计吧。 </p>
<p><br></p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/07/15/2016-07-15-Codeless/" target="_blank" rel="external">点击阅读原文</a>     </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　无需开发介入，也可以统计移动App上按钮的点击次数，简称 &lt;code&gt;无码统计&lt;/code&gt; ，只要是跟App开发相关的同学，相信都对埋点统计有些了解，特别是针对开发人员来说，做代码埋点统计基本上是看不到直接收益也是开发人员最不愿做的一件事，这篇文章讲的就是如何让开发人员摆脱代码埋点的痛苦。&lt;/p&gt;
&lt;p&gt;　　文章主要分为：使用场景、实现原理、适用范围、使用详情四个模块，不管你是产品，还是开发人员又或者是运营人员都适合读这篇文章。  &lt;/p&gt;
&lt;p&gt;　　在App开发过程中我们应该都有过类似的需求：想统计某些按钮的点击次数。例如，我们开发了一个注册模块，注册流程有些复杂，整个注册功能开发完成后，我们想知道到底有没有用户使用注册功能，而又有多少用户使用？         &lt;/p&gt;
&lt;p&gt;有什么方式能知道呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;后台看注册系统?&lt;br&gt;　有些麻烦，需要后台去数据库里查看，还要做成数据可视化的才方便看。      &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看注册按钮的点击情况?&lt;br&gt;　这是最直观的。 主看看两块就行，注册按钮的点击次数 和 提交注册按钮的点击次数，如果发现注册按钮被点击多次（如1W次），而提交注册的点击次数却只有几次，这就可以反映出，很多用户看到的我们的注册流程太复杂，然后选择放弃注册了。同样的道理，我们通过同样的方式可以验证我们其它的功能模块是否有用户经常使用，从而来重新规划我们的设计需求。         &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　一整个功能模块的完成涉及到 产品、UI设计、开发、测试 等几个部分，资源和人力的消耗还是挺大的，所以我们在开发过程是否继续维护这些功能模块，还是开发新功能是要经过慎重衡量，而衡量这些最有说服力的依据就是用户的使用数据，这些数据来源是刚才说的 按钮的点击次数，页面的停留时长 等等。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="//xiaoshenmao.github.io/blog/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Git教程</title>
    <link href="//xiaoshenmao.github.io/blog/2016/07/13/2016-07-13-GitTutorial/"/>
    <id>//xiaoshenmao.github.io/blog/2016/07/13/2016-07-13-GitTutorial/</id>
    <published>2016-07-12T16:00:00.000Z</published>
    <updated>2017-08-22T16:59:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>　　Git是做项目的版本管理，你也可以称它们为版本管理工具。假如现在你有一个文件夹，里面可以是项目，也可以是你的个人笔记(如我这个博客)，或者是你的简历、毕业设计等等，都可以使用git来管理。</p>
<p>　　目前常用的版本控制器有Git和SVN，即使这两个你没有全用过，至少也会听过，我这里以Git为例，个人比较喜欢Git，你也可以看看这篇文章：<a href="http://www.worldhello.net/2012/04/12/why-git-is-better-than-svn.html" target="_blank" rel="external">为什么Git比SVN好</a>。我使用的是Mac，Mac上没自带Git环境，但是作为iOS开发者，我安装Xcode的时候，Xcode里是有自带Git的，所以我不需要考虑怎么去安装Git了。<br><a id="more"></a></p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p><strong>在Mac OS X上安装Git</strong>      </p>
<p>提供两种方法参考：      </p>
<blockquote>
<p>1、通过homebrew安装Git，具体方法请参考<a href="http://brew.sh/" target="_blank" rel="external">homebrew的文档</a><br>2、直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode。     </p>
</blockquote>
<p><strong>在Windows上安装Git</strong>      </p>
<blockquote>
<p>从<a href="https://git-for-windows.github.io" target="_blank" rel="external">https://git-for-windows.github.io</a> 下载，然后按默认选项安装即可，安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p>
</blockquote>
<h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><p>安装完成后，还需要最后一步设置，在命令行输入：</p>
<blockquote>
<ul>
<li>$ git config –global user.name “Your Name”</li>
<li>$ git config –global user.email “email@example.com”</li>
</ul>
</blockquote>
<p>“Your Name”： 是每次提交时所显示的用户名，因为Git是分布式版本控制系统，当我们push到远端时，就需要区分每个提交记录具体是谁提交的，这个”Your Name”就是最好的区分。          </p>
<p>“email@example.com”： 是你远端仓库的email       </p>
<p>–global：用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然我们也可以对某个仓库指定不同的用户名和Email地址。         </p>
<h3 id="开始使用-建立仓库："><a href="#开始使用-建立仓库：" class="headerlink" title="开始使用-建立仓库："></a>开始使用-建立仓库：</h3><p>你在目标文件夹下使命令：    </p>
<blockquote>
<ul>
<li>git init  （创建.git文件）      </li>
</ul>
</blockquote>
<p>就会创建一个 <code>.git</code> 隐藏文件，相当于已经建立了一个本地仓库。</p>
<p><strong>添加到暂存区：</strong>      </p>
<blockquote>
<ul>
<li>git add .   （全部添加到暂存区）    </li>
<li>git commit -m ‘ first commit’  （提交暂存区的记录到本地仓库）     </li>
</ul>
</blockquote>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>git branc 查看时如出现</p>
<blockquote>
<ul>
<li>(HEAD detached at analytics_v2)   </li>
<li>dev</li>
<li>master</li>
</ul>
</blockquote>
<p>代表现在已经进入一个临时的HEAD，可以使用 <code>git checkout -b temp</code> 创建一个 temp branch，这样临时HEAD上修改的东西就不会被丢掉了。<br>然后切换到 dev 分支上，在使用 git branch merge temp，就可以把 temp 分支上的代码合并到 dev 上了。</p>
<p><br></p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/07/13/2016-07-13-GitTutorial/" target="_blank" rel="external">点击阅读原文</a>     </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;　　Git是做项目的版本管理，你也可以称它们为版本管理工具。假如现在你有一个文件夹，里面可以是项目，也可以是你的个人笔记(如我这个博客)，或者是你的简历、毕业设计等等，都可以使用git来管理。&lt;/p&gt;
&lt;p&gt;　　目前常用的版本控制器有Git和SVN，即使这两个你没有全用过，至少也会听过，我这里以Git为例，个人比较喜欢Git，你也可以看看这篇文章：&lt;a href=&quot;http://www.worldhello.net/2012/04/12/why-git-is-better-than-svn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么Git比SVN好&lt;/a&gt;。我使用的是Mac，Mac上没自带Git环境，但是作为iOS开发者，我安装Xcode的时候，Xcode里是有自带Git的，所以我不需要考虑怎么去安装Git了。&lt;br&gt;
    
    </summary>
    
    
      <category term="工具" scheme="//xiaoshenmao.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发迎来机器学习的春天---TensorFlow</title>
    <link href="//xiaoshenmao.github.io/blog/2016/07/07/2016-07-07-iOSMachineLearning_TensorFlow/"/>
    <id>//xiaoshenmao.github.io/blog/2016/07/07/2016-07-07-iOSMachineLearning_TensorFlow/</id>
    <published>2016-07-06T16:00:00.000Z</published>
    <updated>2017-08-22T16:59:36.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br>    <img src="/blog/assets/posts/tfimg/logo.jpg" height="300" width="500"><br></div> 

<p>　　<code>人工智能</code>、<code>机器学习</code>都已走进了我们的日常，尤其是愈演愈热的大数据更是跟我们的生活息息相关，做 <code>人工智能</code>、<code>数据挖掘</code>的人在其他人眼中感觉是很高大上的，总有一种遥不可及的感觉，在我司也经常会听到数据科学部的同事们提到 <code>机器学习</code>、<code>数据挖掘</code> 之类的词。但这些名词真的跟我们移动开发就没直接关系了吗？<br>　　作为移动开发者来说，无时无刻不被这些名词狠狠地敲打着脆弱的内心。💢 💢 💢  何时才能够将<code>机器学习</code>、<code>深度学习</code>应用在移动端，敲响移动端<code>机器学习</code>工业化的大门呢？</p>
<blockquote>
<p>想象一下，某一天你身处一个完全陌生的环境，周围都是陌生的事物，而运行在iPhone的某个APP却对这个环境了如指掌，你要做的就是打开这个APP，输入你需要了解的事物，iPhone告诉你这个事物的信息，你也就没有了陌生事物了。世界就在眼前！<br><a id="more"></a><br>如下图：</p>
<div align="center"><br>    <img src="/blog/assets/posts/tfimg/image02.png" height="300" width="480"><br></div> 

</blockquote>
<p>上面物体的识别准确率还是蛮不错的，基本识别出了键盘（49%的概率）、鼠标（46%的概率）和水杯（24%的概率）。</p>
<p>但是在某些事物的识别准确度方便却差强人意，比如下图：    </p>
<div align="center"><br>　　<img src="/blog/assets/posts/tfimg/image01.png" height="300" width="320"><br></div><br>　　iPhone 6被识别成了iPod（59%的概率），而iPod的却是不怎么敢认（10%的概率）。想想最崩溃的估计是iPhone 6了，身价直接被降了好几个等级。<br><br><div align="center"><br>　　<img src="/blog/assets/posts/tfimg/wq.jpg" height="320" width="240"><br></div> 

<p>　　上面的例子来自于TensorFlow官方iOSDemo，暂且不评述TensorFlow的识别准确度如何，毕竟它还年轻，但是仅凭其识别能力的体现，也给机器学习在移动端的运用带来了无限的可能。</p>
<h3 id="一、TensorFlow（简称TF）"><a href="#一、TensorFlow（简称TF）" class="headerlink" title="一、TensorFlow（简称TF）"></a>一、TensorFlow（简称TF）</h3><p>　　去年，Google资深系统专家Jeff Dean在湾区机器学习大会上隆重介绍了其第二代深度学习系统<a href="http://www.tensorflow.org/" target="_blank" rel="external">TensorFlow</a>，一时间网络上针对TensorFlow的文章铺天盖地，<a href="http://www.leiphone.com/news/201511/UDLyNds2oSTwM2yZ.html" target="_blank" rel="external">揭秘TensorFlow：Google开源到底开的是什么？</a>、<a href="http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html" target="_blank" rel="external">Google开源TensorFlow系统，这背后都有什么门道？</a>、<a href="http://www.zhihu.com/question/37243838" target="_blank" rel="external">如何评价Google发布的第二代深度学习系统TensorFlow?</a>等等文章，TensorFlow的燎原之火一直在燃烧蔓延着，其<a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="external">GitHub上的开源库</a>在此文撰写时，也已经被<code>star：27550</code>，<code>fork：11054</code>了。🔥 🔥 🔥 🔥 🔥 </p>
<p>不负众望，Google一直宣称平台移植性非常好的TensorFlow，终于在2016年6月27日，发布0.9版本，宣布移动端支持。<a href="https://developers.googleblog.com/2016/06/tensorflow-v09-now-available-with.html" target="_blank" rel="external">TensorFlow v0.9 now available with improved mobile support</a>( 有墙💢 )，同时也给出了移动端的<a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/ios_examples" target="_blank" rel="external">Demo</a>，对于代码为生的程序员，身处大数据处理为主导的<a href="http://www.talkingdata.com/" target="_blank" rel="external">TalkingData</a>，也小试身手了一把，下载TensorFlow源码，查看编译指南，开始跳坑、填坑之路，也成就了此篇拙文的产生。</p>
<h3 id="二、从TensorFlow到iOS静态库"><a href="#二、从TensorFlow到iOS静态库" class="headerlink" title="二、从TensorFlow到iOS静态库"></a>二、从TensorFlow到iOS静态库</h3><p>对于iOS平台下如何使用TensorFlow，TensorFlow给出了详细的编译脚本命令，详情请查看<a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/makefile" target="_blank" rel="external">官方文档的命令</a>。</p>
<h5 id="第一步-工具准备"><a href="#第一步-工具准备" class="headerlink" title="第一步. 工具准备"></a>第一步. 工具准备</h5><p><code>工欲善其事必先利其器</code>，在开始编译工作之前，需要准备一些编译所必须的工具：</p>
<ol>
<li><a href="http://brew.sh/" target="_blank" rel="external">Homebrew</a>: Mac os x 上包管理工具，具体使用方法可参考<a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">Doc</a>。</li>
</ol>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></div></pre></td></tr></table></figure>
<ol>
<li>Homebrew安装好之后，依次安装三个辅助性编译工具：</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>libtool   </div><div class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>autoconf   </div><div class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>automake</div></pre></td></tr></table></figure>
<blockquote>
<p>三个工具的含义，请参考：<a href="https://en.wikipedia.org/wiki/GNU_Libtool" target="_blank" rel="external">https://en.wikipedia.org/wiki/GNU_Libtool</a></p>
</blockquote>
<h5 id="第二步-克隆TensorFlow"><a href="#第二步-克隆TensorFlow" class="headerlink" title="第二步. 克隆TensorFlow"></a>第二步. 克隆TensorFlow</h5><p>Google以<a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache 2.0</a>开源协议将TensorFlow开源在<a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="external">GitHub</a>上，我们可以直接使用TensorFlow源码。</p>
<p>在任意你想存放TensorFlow源码的地方（建议不要放在桌面。^_^），clone项目。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/tensorflow/tensorflow</div></pre></td></tr></table></figure>
<h5 id="第三步-编译前准备"><a href="#第三步-编译前准备" class="headerlink" title="第三步. 编译前准备"></a>第三步. 编译前准备</h5><p>　　在TensorFlow的<code>tensorflow/contrib/makefile/</code>目录下，有很多可使用的编译脚本，其中<code>build_all_ios.sh</code>脚本专门用来一键编译TensorFlow iOS静态库。虽然可以直接使用此脚本进行一键编译，但是因为有墙，某些依赖需要提前做处理。</p>
<ol>
<li><p>下载protobuf</p>
<p> protobuf 是编译前唯一需要特殊处理的依赖库，<a href="https://github.com/google/protobuf/archive/master.zip" target="_blank" rel="external">点击下载</a>，下载protobuf之后，解压，备用。</p>
</li>
</ol>
<ol>
<li><p>下载googlemock</p>
<p> 虽然protobuf编译脚本<code>autogen.sh</code>中的googlemock链接地址<code>https://googlemock.googlecode.com/files/gmock-1.7.0.zip</code>无法直接下载到，但是细心的人会发现，在浏览器中输入<code>https://googlemock.googlecode.com/</code>地址后，会跳转到<code>https://github.com/google/googlemock</code>地址，google在GiHub上的仓库地址。而GitHub上的仓库，我们可以直接的下载，克隆等。</p>
<p> 我们直接在GitHub上下载googlemock(<a href="https://github.com/google/googlemock/archive/master.zip" target="_blank" rel="external">点击下载</a>)，下载完成后，修改压缩包名字为<code>gmock-1.7.0.zip</code>，修改后将此压缩包移至上一步protobuf文件夹目录下，备用。</p>
</li>
<li><p>修改下载依赖脚本，移除protobuf的下载</p>
<p> 在<code>tensorflow/contrib/makefile/</code>目录下，<code>download_dependencies.sh</code>脚本用来下载相关依赖，打开此脚本文件，注释掉或者直接删掉<code>git clone https://github.com/google/protobuf.git ${DOWNLOADS_DIR}/protobuf</code>部分，目的是不让脚本去下载protobuf。</p>
<p> 上面三步准备好后，接下来就进入静态库编译了。</p>
</li>
</ol>
<h5 id="第四步-一键编译"><a href="#第四步-一键编译" class="headerlink" title="第四步. 一键编译"></a>第四步. 一键编译</h5><p>　　前面已经知道在TensorFlow文件夹<code>tensorflow/contrib/makefile/</code>目录下的<code>build_all_ios.sh</code>脚本是用来编译iOS静态库的脚本，因此可以直接执行此脚本，开始静态库的编译工作了。</p>
<p>　　但是有一个问题大家可能会发现，由于编译TensorFlow需要用到protobuf，但是protobuf使我们自己手动下载的，该怎么让手动下载的protobuf能够直接让<code>build_all_ios.sh</code>脚本使用呢？</p>
<p>　　答案是<code>复制、粘贴</code>。可能有些low，但是有效。执行命令 <code>build_all_ios.sh</code>之后，立即把之前手动下载的protobuf文件夹拷贝进<code>tensorflow/contrib/makefile/downloads</code>目录。（放心，你拷贝的速度会很快，不会影响编译的执行的。^_^） </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> build_all_ios.sh</span></div></pre></td></tr></table></figure>
<p>　　一切准备就绪，接下来就是静静的等待编译完成了。在Mac编译的过程中，建议插上电源，最好不要让设备休眠断电，也最好不要去干别的东西，出去溜达一圈，回来后就看到战果了。</p>
<p> 编译完成之后，会在<code>tensorflow/contrib/makefile/gen/</code>目录下看到编译的结果，关于这些静态库该如何使用，自己的项目如何应用，请参考<a href="https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/ios_examples" target="_blank" rel="external">TensorFlow iOS Examples</a>。</p>
<h3 id="三、遇到的问题"><a href="#三、遇到的问题" class="headerlink" title="三、遇到的问题"></a>三、遇到的问题</h3><p>1、googlecode.com被墙了，需要翻墙！（目前测试挂了VPN也没用），这也是上面编译前准备为什么要那么做的原因。</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl: (7) Failed <span class="keyword">to</span> connect <span class="keyword">to</span> googlemock.googlecode.com<span class="built_in"> port </span>443: Operation timed out</div></pre></td></tr></table></figure>
<p>解决： 请参考 『第三步. 编译前准备』。</p>
<p>2、没有Xcode。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">xcrun:</span> <span class="string">error:</span> SDK <span class="string">"iphoneos"</span> cannot be located</div><div class="line"><span class="string">xcrun:</span> <span class="string">error:</span> SDK <span class="string">"iphoneos"</span> cannot be located</div><div class="line"><span class="string">xcrun:</span> <span class="string">error:</span> unable to lookup item <span class="string">'PlatformPath'</span> <span class="keyword">in</span> SDK <span class="string">'iphoneos'</span></div><div class="line">+ IPHONEOS_PLATFORM=</div></pre></td></tr></table></figure>
<p>解决：安装Xcode，从上面报错的命令中可以看到，在编译静态库的过程中使用了<code>xcrun</code>，而此命令是xCode本身具有的能力。</p>
<p>3、你的Xcode版本不是7.3或以后，或者你有多个Xcode，而默认的安装路径版本不是7.3或以后。</p>
<p>```<br>error: Xcode 7.3.0 or later is required.</p>
<ul>
<li>exit 1<br>```/</li>
</ul>
<p>解决：更新Xcode至最新版本，并且保证默认路径下是最新/版本。</p>
<p>如果Xcode是7.3，并且没有条件更新Xcode，你可以修改<code>tensorflow/contrib/makefile/compile_ios_tensorflow.sh</code> 里的<code>REQUIRED_XCODE_VERSION=7.3.0</code>，为<code>REQUIRED_XCODE_VERSION=7.3</code>。（这样修改，目前还不确定会不会带来一些其他影响，最好是升级你的Xcode）</p>
<h3 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h3><ul>
<li><a href="http://tensorfly.cn/" target="_blank" rel="external">TensorFlow 中文社区</a></li>
<li><a href="https://www.tensorflow.org/mobile.html" target="_blank" rel="external">TensorFlow for Mobile</a></li>
<li><a href="http://chenrudan.github.io/blog/2015/11/18/comparethreeopenlib.html" target="_blank" rel="external">Caffe、TensorFlow、MXnet三个开源库对比</a>   </li>
<li><a href="http://weibo.com/p/1001603907610737775666" target="_blank" rel="external">如何评价Tensorflow和其它深度学习系统</a>    </li>
<li><a href="http://www.algorithmdog.com/%E8%B0%81%E5%B0%86%E5%A4%BA%E5%8F%96%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E4%B8%9A%E6%A0%87%E5%87%86%E7%9A%84%E8%8D%A3%E8%80%80" target="_blank" rel="external">深度学习框架大战正在进行，谁将夺取“深度学习工业标准”的荣耀？</a>  </li>
</ul>
<p><br></p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/07/07/2016-07-07-iOSMachineLearning_TensorFlow/" target="_blank" rel="external">点击阅读原文</a>        </p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/blog/assets/posts/tfimg/logo.jpg&quot; height=&quot;300&quot; width=&quot;500&quot;&gt;&lt;br&gt;&lt;/div&gt; 

&lt;p&gt;　　&lt;code&gt;人工智能&lt;/code&gt;、&lt;code&gt;机器学习&lt;/code&gt;都已走进了我们的日常，尤其是愈演愈热的大数据更是跟我们的生活息息相关，做 &lt;code&gt;人工智能&lt;/code&gt;、&lt;code&gt;数据挖掘&lt;/code&gt;的人在其他人眼中感觉是很高大上的，总有一种遥不可及的感觉，在我司也经常会听到数据科学部的同事们提到 &lt;code&gt;机器学习&lt;/code&gt;、&lt;code&gt;数据挖掘&lt;/code&gt; 之类的词。但这些名词真的跟我们移动开发就没直接关系了吗？&lt;br&gt;　　作为移动开发者来说，无时无刻不被这些名词狠狠地敲打着脆弱的内心。💢 💢 💢  何时才能够将&lt;code&gt;机器学习&lt;/code&gt;、&lt;code&gt;深度学习&lt;/code&gt;应用在移动端，敲响移动端&lt;code&gt;机器学习&lt;/code&gt;工业化的大门呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;想象一下，某一天你身处一个完全陌生的环境，周围都是陌生的事物，而运行在iPhone的某个APP却对这个环境了如指掌，你要做的就是打开这个APP，输入你需要了解的事物，iPhone告诉你这个事物的信息，你也就没有了陌生事物了。世界就在眼前！&lt;br&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="//xiaoshenmao.github.io/blog/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习入门（名词科普）</title>
    <link href="//xiaoshenmao.github.io/blog/2016/07/05/2016-07-05-MachineLearning_introduce/"/>
    <id>//xiaoshenmao.github.io/blog/2016/07/05/2016-07-05-MachineLearning_introduce/</id>
    <published>2016-07-04T16:00:00.000Z</published>
    <updated>2017-08-22T17:00:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="通用名词"><a href="#通用名词" class="headerlink" title="通用名词"></a>通用名词</h3><h4 id="ML"><a href="#ML" class="headerlink" title="ML"></a>ML</h4><p>　　<strong>名词解释：</strong> 机器学习(Machine Learning)是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。<br>　　它是人工智能的核心，是使计算机具有智能的根本途径，其应用遍及人工智能的各个领域，它主要使用归纳、综合而不是演绎。</p>
<h4 id="DL"><a href="#DL" class="headerlink" title="DL"></a>DL</h4><p>　　<strong>名词解释：</strong> 深度学习（Deep Learning）是机器学习拉出的分支，它试图使用包含复杂结构或由多重非线性变换构成的多个处理层对数据进行高层抽象的算法。<br>　　深度学习是机器学习中表征学习方法。观测值（例如一幅图像）可以使用多种方式来表示，如每个像素强度值的矢量，或者更抽象地表示成一系列边、特定形状的区域等。而使用某些特定的表示方法更容易从实例中学习任务（例如，人脸识别或面部表情识别）。深度学习的好处是将用非监督式或半监督式的特征学习和分层特征提取的高效算法来替代手工获取特征。</p>
<h4 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h4><p>　　<strong>名词解释：</strong> 卷积神经网络（Convolutional neural networks，简称CNNs）是一种深度的监督学习下的机器学习模型<br><a id="more"></a></p>
<h3 id="算法名词"><a href="#算法名词" class="headerlink" title="算法名词"></a>算法名词</h3><h4 id="KNN"><a href="#KNN" class="headerlink" title="KNN:"></a>KNN:</h4><p>　　<strong>名词解释：</strong> 邻近算法，或者说K最近邻(kNN，k-NearestNeighbor)分类算法。<br>　　邻近算法是数据挖掘分类技术中最简单的方法之一。所谓K最近邻，就是k个最近的邻居的意思，说的是每个样本都可以用它最接近的k个邻居来代表。<br>　　kNN算法的核心思想是如果一个样本在特征空间中的k个最相邻的样本中的大多数属于某一个类别，则该样本也属于这个类别，并具有这个类别上样本的特性。该方法在确定分类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。 kNN方法在类别决策时，只与极少量的相邻样本有关。由于kNN方法主要靠周围有限的邻近的样本，而不是靠判别类域的方法来确定所属类别的，因此对于类域的交叉或重叠较多的待分样本集来说，kNN方法较其他方法更为适合。</p>
<h4 id="SVM"><a href="#SVM" class="headerlink" title="SVM:"></a>SVM:</h4><p>　　<strong>名词解释：</strong> 支持向量机（Support Vector Machine）。<br>　　在机器学习领域，支持向量机SVM(Support Vector Machine)是一个有监督的学习模型，通常用来进行模式识别、分类、以及回归分析。</p>
<p><br></p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/07/05/2016-07-05-MachineLearning_introduce/" target="_blank" rel="external">点击阅读原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;通用名词&quot;&gt;&lt;a href=&quot;#通用名词&quot; class=&quot;headerlink&quot; title=&quot;通用名词&quot;&gt;&lt;/a&gt;通用名词&lt;/h3&gt;&lt;h4 id=&quot;ML&quot;&gt;&lt;a href=&quot;#ML&quot; class=&quot;headerlink&quot; title=&quot;ML&quot;&gt;&lt;/a&gt;ML&lt;/h4&gt;&lt;p&gt;　　&lt;strong&gt;名词解释：&lt;/strong&gt; 机器学习(Machine Learning)是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。&lt;br&gt;　　它是人工智能的核心，是使计算机具有智能的根本途径，其应用遍及人工智能的各个领域，它主要使用归纳、综合而不是演绎。&lt;/p&gt;
&lt;h4 id=&quot;DL&quot;&gt;&lt;a href=&quot;#DL&quot; class=&quot;headerlink&quot; title=&quot;DL&quot;&gt;&lt;/a&gt;DL&lt;/h4&gt;&lt;p&gt;　　&lt;strong&gt;名词解释：&lt;/strong&gt; 深度学习（Deep Learning）是机器学习拉出的分支，它试图使用包含复杂结构或由多重非线性变换构成的多个处理层对数据进行高层抽象的算法。&lt;br&gt;　　深度学习是机器学习中表征学习方法。观测值（例如一幅图像）可以使用多种方式来表示，如每个像素强度值的矢量，或者更抽象地表示成一系列边、特定形状的区域等。而使用某些特定的表示方法更容易从实例中学习任务（例如，人脸识别或面部表情识别）。深度学习的好处是将用非监督式或半监督式的特征学习和分层特征提取的高效算法来替代手工获取特征。&lt;/p&gt;
&lt;h4 id=&quot;CNN&quot;&gt;&lt;a href=&quot;#CNN&quot; class=&quot;headerlink&quot; title=&quot;CNN&quot;&gt;&lt;/a&gt;CNN&lt;/h4&gt;&lt;p&gt;　　&lt;strong&gt;名词解释：&lt;/strong&gt; 卷积神经网络（Convolutional neural networks，简称CNNs）是一种深度的监督学习下的机器学习模型&lt;br&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="//xiaoshenmao.github.io/blog/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>开发常用工具</title>
    <link href="//xiaoshenmao.github.io/blog/2016/06/02/2016-06-02-Develop_Tool/"/>
    <id>//xiaoshenmao.github.io/blog/2016/06/02/2016-06-02-Develop_Tool/</id>
    <published>2016-06-02T03:15:06.000Z</published>
    <updated>2017-08-22T17:00:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善其事必先利其器，选择一些好的工具可以成吨的提高自己的工作效率。</p>
<h3 id="个人开发常用工具的收集"><a href="#个人开发常用工具的收集" class="headerlink" title="个人开发常用工具的收集"></a>个人开发常用工具的收集</h3><ul>
<li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">cmd Markdown</a> 作业部落出版的Markdown编辑器       </li>
<li><a href="https://github.com/rest-client/rest-client" target="_blank" rel="external">RESTClient</a> 一个开源的客户端HTTP调试工具。    </li>
<li><a href="https://github.com/getlantern/lantern" target="_blank" rel="external">lantern</a> 蓝灯,一款开源的翻墙工具。    </li>
<li><a href="https://www.charlesproxy.com/" target="_blank" rel="external">Charles</a> 青花瓷, 一款HTTP/HTTPS的抓包工具。<ul>
<li><a href="http://blog.devtang.com/2015/11/14/charles-introduction/" target="_blank" rel="external">Charles 从入门到精通</a>  </li>
</ul>
</li>
<li><a href="http://www.sublimetext.com" target="_blank" rel="external">Sublime</a> 一款强大的IDE,支持Python、JS、JSON格式化等等…更重要的是<code>Sublime</code>支持的插件很多。  <ul>
<li><a href="http://www.xuanfengge.com/practical-collection-of-sublime-plug-in.html" target="_blank" rel="external">实用的sublime插件集合</a>     <a id="more"></a>
<h3 id="文章配图网站"><a href="#文章配图网站" class="headerlink" title="文章配图网站"></a>文章配图网站</h3></li>
</ul>
</li>
</ul>
<p>还在为文章配图而苦恼吗？点击店面的网站吧，各种各样的图片帮你丰富你的文章。</p>
<p><a href="http://www.gratisography.com/" target="_blank" rel="external">Gratisography</a> gratisography 里面的图片每周都会更新，很多时尚流行的照片在里面，并且适合用在设计项目上。</p>
<p><a href="http://www.ssyer.com/home-index.html" target="_blank" rel="external">ssyer</a>国内的网站，不需要翻墙，速度很快，图片最全。完全免费的图片库。</p>
<p><a href="https://pixabay.com/" target="_blank" rel="external">Pixabay</a> 不同类型的高清摄影照片。</p>
<h3 id="UI设计网站"><a href="#UI设计网站" class="headerlink" title="UI设计网站"></a>UI设计网站</h3><p>作为一个开发者，自己写些小程序的时候经常会为没有UI而烦恼，下面就是一些UI设计网站，有新颖的UI界面设计，也有单独的UI元素，icon等。</p>
<p><a href="http://www.ui.cn/" target="_blank" rel="external">UI中国</a> 国内潮流的UI设计作品。</p>
<p><a href="http://www.webdesigndev.com/" target="_blank" rel="external">webdesigndev</a> 国外网站设计文章，各种各样的资料看到你眼花缭乱。</p>
<p><a href="https://dribbble.com/" target="_blank" rel="external">dribbble</a> 接触过设计的应该都知道，一个很好的UI设计平台。</p>
<p><a href="http://www.flaticon.com/" target="_blank" rel="external">flaticon</a> 各种icon的设计，一定有你想想要的。</p>
<p><br></p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/06/02/2016-06-02-Develop_Tool/" target="_blank" rel="external">点击阅读原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工欲善其事必先利其器，选择一些好的工具可以成吨的提高自己的工作效率。&lt;/p&gt;
&lt;h3 id=&quot;个人开发常用工具的收集&quot;&gt;&lt;a href=&quot;#个人开发常用工具的收集&quot; class=&quot;headerlink&quot; title=&quot;个人开发常用工具的收集&quot;&gt;&lt;/a&gt;个人开发常用工具的收集&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zybuluo.com/mdeditor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cmd Markdown&lt;/a&gt; 作业部落出版的Markdown编辑器       &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rest-client/rest-client&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RESTClient&lt;/a&gt; 一个开源的客户端HTTP调试工具。    &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/getlantern/lantern&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lantern&lt;/a&gt; 蓝灯,一款开源的翻墙工具。    &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.charlesproxy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Charles&lt;/a&gt; 青花瓷, 一款HTTP/HTTPS的抓包工具。&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.devtang.com/2015/11/14/charles-introduction/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Charles 从入门到精通&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sublime&lt;/a&gt; 一款强大的IDE,支持Python、JS、JSON格式化等等…更重要的是&lt;code&gt;Sublime&lt;/code&gt;支持的插件很多。  &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.xuanfengge.com/practical-collection-of-sublime-plug-in.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实用的sublime插件集合&lt;/a&gt;
    
    </summary>
    
    
      <category term="工具" scheme="//xiaoshenmao.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>我们日常生活中的 iBeacon</title>
    <link href="//xiaoshenmao.github.io/blog/2016/04/06/2016-04-07-iBeacon/"/>
    <id>//xiaoshenmao.github.io/blog/2016/04/06/2016-04-07-iBeacon/</id>
    <published>2016-04-06T03:25:06.000Z</published>
    <updated>2017-08-22T17:01:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　随着低功耗蓝牙的推出，iBeacon 的使用是越来越广泛了，如：微信的附近摇一摇功能，又或者是当你进入大型商场，一些店铺给你推送通知，VR 场景识别等等，这些表示 iBeacon 已经与我们的生活精密相连了。  </p>
<h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><ul>
<li><p><strong>概念：</strong> iBeacon 是 iOS7 后苹果出的一项新技术，支持蓝牙4.0(或以上)的 iOS 设备，工作方式是低功耗蓝牙（Bluetooth Low Energy），向周围发送自己特有的ID，一个 <code>iBeacon</code> 硬件设备在不做任何处理的情况下一般可使用两三年左右。</p>
</li>
<li><p>iBeacon 的形状多种多样，大致如下图。<br><img src="/blog/assets/posts/iBeacon/iBeacon.png" alt=""></p>
</li>
</ul>
<h4 id="目前哪些地方有-iBeacon："><a href="#目前哪些地方有-iBeacon：" class="headerlink" title="目前哪些地方有 iBeacon："></a>目前哪些地方有 iBeacon：</h4><ul>
<li>1、微信摇一摇：使用微信的人应该都知道微信有一个 <code>周边摇一摇</code> 功能， 使用的就是 iBeacon 技术。 很多餐馆都部有 iBeacon 的点，如果你想验证直接监测微信的 iBeaconUUID：FDA50693-A4E2-4FB1-AFCF-C6EB07647825。  </li>
<li>2、走进某个商场时，忽然手机里推出一个通知，也是使用 iBeacon 技术。   </li>
<li>3、帝都的地跌站大部分也有微信 UUID 的 iBeacon 发射器，具体是用来做什么的还不是慢清楚。  </li>
<li>4、iBeacon 还可实现地理围栏、室内定位等功能。</li>
</ul>
<h4 id="iBeacon-技术"><a href="#iBeacon-技术" class="headerlink" title="iBeacon 技术"></a>iBeacon 技术</h4><p>　　Apple的 <code>CoreLocation.frame</code> 里把iBeacon封装成了一个 <code>CLBeacon</code> 类，<code>CLBeacon</code> 大致有下面几个属性组成：<code>Major</code> 、<code>Minor</code> 、 <code>proximity</code> 、 <code>rssi</code> 、 <code>accuracy</code> 。   </p>
 <a id="more"></a>   
<h4 id="开发者如何使用-iBeacopn"><a href="#开发者如何使用-iBeacopn" class="headerlink" title="开发者如何使用 iBeacopn?:"></a>开发者如何使用 iBeacopn?:</h4><ul>
<li>1、用户需要添加 <code>CoreLocation.framework</code> ，App 才具备定位的功能。</li>
<li>2、App 开发者需要开启定位功能需要配置：在 <code>Xcode</code> 的 <code>info.plist</code> 里面添加 <code>NSLocationAlwaysUsageDescription</code>(允许后台访问位置信息) 或 <code>requestWhenInUseAuthorization</code>(允许使用时访问位置信息) 字段。（iOS7后该添加了该字段应用才会弹出 `是否允许应用访问用户的位置信息）。</li>
</ul>
<p>创建和注册一个beacon区域   </p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">registerBeaconRegionWithUUID:</span>(NSUUID *)proximityUUID <span class="string">andIdentifier:</span>(NSString *)identifier</div><div class="line">&#123;</div><div class="line">    CLBeaconRegion *beaconRegion = [[CLBeaconRegion alloc] <span class="string">initWithProximityUUID:</span>proximityUUID <span class="string">identifier:</span>identifier];</div><div class="line">    </div><div class="line">    [manager <span class="string">startMonitoringForRegion:</span>beaconRegion];</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">当接受到 iBeacon 信号时回调 ，beacons 里面装了信号的对象，可能同时出现多个信号。</div></pre></td></tr></table></figure>
<ul>
<li>(void)locationManager:(CLLocationManager <em>)manager didRangeBeacons:(NSArray </em>)beacons inRegion:(CLBeaconRegion *)region<br>{</li>
</ul>
<p>}<br>``` </p>
<p>Note: <a href="https://developer.apple.com/library/prerelease/content/samplecode/AirLocate/Introduction/Intro.html" target="_blank" rel="external">苹果iBeacon官方代码例子</a>。    </p>
<h4 id="iBeacon-硬件设备条件："><a href="#iBeacon-硬件设备条件：" class="headerlink" title="iBeacon 硬件设备条件："></a>iBeacon 硬件设备条件：</h4><ul>
<li>用户设备 iOS7 或更新操作系统。</li>
<li>用户蓝牙设备4.0或更新。</li>
<li>用户蓝牙设备必须开启。</li>
<li>用户设备定位服务必须开启，允许应用访问位置信息。</li>
</ul>
<h4 id="iBeacon-能唤醒应用"><a href="#iBeacon-能唤醒应用" class="headerlink" title="iBeacon 能唤醒应用"></a>iBeacon 能唤醒应用</h4><ul>
<li>前提：App 具备上面使用 iBeacon 的功能，并且允许后台访问位置信息。</li>
<li>现象：App 能被 iBeacon 信号唤醒，即使 App 已经被用户手动杀死掉了，App 也能被 iBeacon 技术唤醒，并且能执行一系列操作。</li>
<li>影响：导致 App 用户在并没有使用 <code>App</code> 的情况下, <code>App</code> 有了长达几个小时的后台使用时长。</li>
</ul>
<p><br></p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/04/06/2016-04-07-iBeacon/" target="_blank" rel="external">点击阅读原文</a>      </p>
]]></content>
    
    <summary type="html">
    
      iBeaco n技术调研与知识分享
    
    </summary>
    
    
      <category term="技术" scheme="//xiaoshenmao.github.io/blog/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods使用心得</title>
    <link href="//xiaoshenmao.github.io/blog/2016/04/02/2016-04-02-CocoaPod_Use/"/>
    <id>//xiaoshenmao.github.io/blog/2016/04/02/2016-04-02-CocoaPod_Use/</id>
    <published>2016-04-01T16:00:00.000Z</published>
    <updated>2017-08-22T17:01:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p>　本章介绍什么是 <code>CocoaPods</code> ,如何使用 <code>CocoaPods</code> , 以及 <code>CocoaPods</code> 的原理,和使用 <code>CocoaPods</code> 时经常出现的一些问题。</p>
<p>　Cocoapods 是 OS X 和 iOS 下的一个第三方库管理工具。我们能使用CocoaPods添加被称作 “Pods”的依赖库,并轻松管理它们的版本,CocoaPods会帮我们配置好这些三方库的路径及开发环境,极大的提升了开发者的工作效率。</p>
<h3 id="安装CocoaPods"><a href="#安装CocoaPods" class="headerlink" title="安装CocoaPods　"></a>安装CocoaPods　</h3><p>　Mac下自带ruby,使用ruby的gem命令安装,ruby的软件源被墙了,把官方的ruby源替换成国内的淘宝源。</p>
<h3 id="更换Gem源"><a href="#更换Gem源" class="headerlink" title="更换Gem源"></a>更换Gem源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ gem sources --remove https://rubygems.org/</div><div class="line">$ gem sources -a https://ruby.taobao.org/</div><div class="line">$ gem sources -l</div></pre></td></tr></table></figure>
<ul>
<li>1.移除掉原有的源（服务器在国外，速度较慢）。</li>
<li>2.等1有反应之后再敲2命令（替换成淘宝上的ruby镜像https）。</li>
<li>3.验证是否成功。成功如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">*** CURRENT SOURCES ***</div><div class="line"></div><div class="line">http://ruby.taobao.org/</div></pre></td></tr></table></figure>
<a id="more"></a> 
<h3 id="更新Gem源"><a href="#更新Gem源" class="headerlink" title="更新Gem源"></a>更新Gem源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sudo gem update --system</div></pre></td></tr></table></figure>
<h3 id="安装cocoapods"><a href="#安装cocoapods" class="headerlink" title="安装cocoapods"></a>安装cocoapods</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ sudo gem install cocoapods</div><div class="line">$ pod setup</div></pre></td></tr></table></figure>
<p>pod setup 在执行时会比较慢，因为Cocoapods 要将它的信息下载到 ~/.cocoapods目录下, 耐心等待…</p>
<h4 id="提升cocoapods的安装速度"><a href="#提升cocoapods的安装速度" class="headerlink" title="提升cocoapods的安装速度"></a>提升cocoapods的安装速度</h4><p>所有的项目的 Podspec 文件都托管在<a href="https://github.com/CocoaPods/Specs。第一次执行" target="_blank" rel="external">https://github.com/CocoaPods/Specs。第一次执行</a> pod setup 时，CocoaPods 会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大，有 80M 左右。<br>作者akinliu 在 gitcafe 和 oschina 上建立了 CocoaPods 索引库的镜像(在国内),我们可以使用CocoaPods国内的镜像索引，操作时会快多了,如gitcafe：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">pod repo remove master</div><div class="line">pod repo add master https://gitcafe.com/akuandev/Specs.git</div><div class="line">pod repo update</div></pre></td></tr></table></figure>
<h3 id="使用cocoapods"><a href="#使用cocoapods" class="headerlink" title="使用cocoapods"></a>使用cocoapods</h3><p>cocoapods安装完成后，使用 pod search 命令来验证一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">pod search AFNetworking</div></pre></td></tr></table></figure>
<p>终端将会有如下结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">-&gt; AFNetworking (3.0.4)</div><div class="line">A delightful iOS and OS X networking framework.</div><div class="line">pod <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 3.0.4'</span></div><div class="line">- Homepage: https://github.com/AFNetworking/AFNetworking</div><div class="line">- Source:   https://github.com/AFNetworking/AFNetworking.git</div><div class="line">- Versions: 3.0.4, 3.0.3, 3.0.2, 3.0.1, 3.0.0, 3.0.0-beta.3, 3.0.0-beta.2,</div><div class="line">3.0.0-beta.1, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.4, 2.5.3, 2.5.2, 2.5.1, 2.5.0,</div><div class="line">2.4.1, 2.4.0, 2.3.1, 2.3.0, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.1.0, 2.0.3,</div><div class="line">2.0.2, 2.0.1, 2.0.0, 2.0.0-RC3, 2.0.0-RC2, 2.0.0-RC1, 1.3.4, 1.3.3, 1.3.2,</div><div class="line">1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0.1, 1.0, 1.0RC3, 1.0RC2, 1.0RC1,</div><div class="line">0.10.1, 0.10.0, 0.9.2, 0.9.1, 0.9.0, 0.7.0, 0.5.1 [master repo]</div><div class="line">- Subspecs:</div><div class="line">- AFNetworking/Serialization (3.0.4)</div><div class="line">- AFNetworking/Security (3.0.4)</div><div class="line">- AFNetworking/Reachability (3.0.4)</div><div class="line">- AFNetworking/NSURLSession (3.0.4)</div><div class="line">- AFNetworking/UIKit (3.0.4)</div><div class="line"></div><div class="line"></div><div class="line">-&gt; AFNetworking+AutoRetry (0.0.5)</div><div class="line">Auto Retries <span class="keyword">for</span> AFNetworking requests</div><div class="line">pod <span class="string">'AFNetworking+AutoRetry'</span>, <span class="string">'~&gt; 0.0.5'</span></div><div class="line">- Homepage: https://github.com/shaioz/AFNetworking-AutoRetry</div><div class="line">- Source:   https://github.com/shaioz/AFNetworking-AutoRetry.git</div><div class="line">- Versions: 0.0.5, 0.0.4, 0.0.3, 0.0.2, 0.0.1 [master repo]</div><div class="line"></div><div class="line">.........太多了，省略</div></pre></td></tr></table></figure>
<p>pod search 是CocoaPods的一个搜索命令,我们可以用来搜索任何托管在CocoaPods上的三方库。    </p>
<p>使用CocoaPods时需要新建一个 Podfile 的文件,cd 到 我的Demo项目里，Demo目录下有三个文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Demo 、  Demo.xcodeproj  、 DemoTests</div></pre></td></tr></table></figure>
<p>新建 Podfile</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">touch Podfile</div></pre></td></tr></table></figure>
<p>vim 编辑 Podfile</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim Podfile</div></pre></td></tr></table></figure>
<p>由于是新建的 Podfile 里面应该是空白的。然后我们在里面添加依赖库，格式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">platform :ios</div><div class="line">pod <span class="string">'Reachability'</span>,  <span class="string">'~&gt; 3.0.0'</span></div><div class="line">pod <span class="string">'ASIHTTPRequest'</span></div></pre></td></tr></table></figure>
<p>‘~&gt; 3.0.0’ 是 Reachability 的版本号, 设定了版本号CocoaPods就会下载对应的版本,ASIHTTPRequest没指定版本号,CocoaPods就会下载最新版本的ASIHTTPRequest。<br>退出编辑，执行 pod install 下载三方库。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">pod install</div></pre></td></tr></table></figure>
<p>完成后我Demo项目下的文件多了几个:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Demo 、  Demo.xcodeproj  、 DemoTests （之前的三个）</div><div class="line"></div><div class="line">Demo.xcworkspace 、Podfile 、Podfile.lock 、Pods</div></pre></td></tr></table></figure>
<p>这个时候我们打开Demo项目是点击 Demo.xcworkspace 文件了，到此CocoaPods的基本使用已经讲完了，接下来的CocoaPods的原理，和让我们自己的三方库也支持CocoaPods。</p>
<p>待续…</p>
<p><a href="http://blog.jobbole.com/53365/" target="_blank" rel="external">深入理解 CocoaPods</a>    </p>
<p><br></p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/04/02/2016-04-02-CocoaPod_Use/" target="_blank" rel="external">点击阅读原文</a>     </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h3&gt;&lt;p&gt;　本章介绍什么是 &lt;code&gt;CocoaPods&lt;/code&gt; ,如何使用 &lt;code&gt;CocoaPods&lt;/code&gt; , 以及 &lt;code&gt;CocoaPods&lt;/code&gt; 的原理,和使用 &lt;code&gt;CocoaPods&lt;/code&gt; 时经常出现的一些问题。&lt;/p&gt;
&lt;p&gt;　Cocoapods 是 OS X 和 iOS 下的一个第三方库管理工具。我们能使用CocoaPods添加被称作 “Pods”的依赖库,并轻松管理它们的版本,CocoaPods会帮我们配置好这些三方库的路径及开发环境,极大的提升了开发者的工作效率。&lt;/p&gt;
&lt;h3 id=&quot;安装CocoaPods&quot;&gt;&lt;a href=&quot;#安装CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;安装CocoaPods　&quot;&gt;&lt;/a&gt;安装CocoaPods　&lt;/h3&gt;&lt;p&gt;　Mac下自带ruby,使用ruby的gem命令安装,ruby的软件源被墙了,把官方的ruby源替换成国内的淘宝源。&lt;/p&gt;
&lt;h3 id=&quot;更换Gem源&quot;&gt;&lt;a href=&quot;#更换Gem源&quot; class=&quot;headerlink&quot; title=&quot;更换Gem源&quot;&gt;&lt;/a&gt;更换Gem源&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ gem sources --remove https://rubygems.org/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ gem sources -a https://ruby.taobao.org/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ gem sources -l&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;1.移除掉原有的源（服务器在国外，速度较慢）。&lt;/li&gt;
&lt;li&gt;2.等1有反应之后再敲2命令（替换成淘宝上的ruby镜像https）。&lt;/li&gt;
&lt;li&gt;3.验证是否成功。成功如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*** CURRENT SOURCES ***&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http://ruby.taobao.org/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="//xiaoshenmao.github.io/blog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS动态更新</title>
    <link href="//xiaoshenmao.github.io/blog/2016/01/09/2016-01-09-iOS_OTA/"/>
    <id>//xiaoshenmao.github.io/blog/2016/01/09/2016-01-09-iOS_OTA/</id>
    <published>2016-01-09T03:15:06.000Z</published>
    <updated>2017-08-22T17:01:45.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>1、控件到 <code>window</code> 的层级关系:   </li>
<li>2、分析控件的详细路径:</li>
<li>3、动态修改控件:      </li>
<li>4、工具篇:</li>
</ul>
<h3 id="视图的层级关系"><a href="#视图的层级关系" class="headerlink" title="视图的层级关系"></a>视图的层级关系</h3><p>每个 <code>App</code> , 至少有一个根 <code>Window</code> , 通常情况下我们只用一个 。<code>window</code> 有一个 <code>rootViewController</code> , 这就是我们所谓的根视图 , 我们所有的控制器都是放在 <code>rootViewController</code> 里面的。</p>
<p>如果在项目里有了这么一个路径 , 我们可以做什么呢？   </p>
<ul>
<li>在当项目很复杂 , 可以其它地方可以直接修改这个控件的状态</li>
<li>当某个控件命名存在却又没有显示出来 , 可以通过路径来辅助查找</li>
<li>由服务器下发一些配置 , 使用 <code>Runtime</code> 去动态的修改已上线的项目</li>
</ul>
<p>下面将介绍如何使用代码来找出这些视图(控件)的路径</p>
<h3 id="分析控件的详细路径"><a href="#分析控件的详细路径" class="headerlink" title="分析控件的详细路径"></a>分析控件的详细路径</h3><h4 id="1、找出根-Window"><a href="#1、找出根-Window" class="headerlink" title="1、找出根 Window :"></a>1、找出根 <code>Window</code> :</h4><p>每一个视图、控件 , 他们最终的根都是main函数返回的 <code>application</code> , 通过 <code>[UIApplication sharedApplication]</code> 可以得到 。 <code>application</code> 的 <code>windows</code> 属性是一个数组 , 这里面装的是这个应用的所有 <code>Window</code> , 我们通常用的是第一个也就是 <code>application.windows[0]</code><br><a id="more"></a> </p>
<h4 id="2、遍历视图"><a href="#2、遍历视图" class="headerlink" title="2、遍历视图 :"></a>2、遍历视图 :</h4><p>得到了 <code>window</code> 对象一切都好办了 。 然后拿到 <code>window</code> 的 <code>rootViewController</code> , 在获取 <code>rootViewController</code> 里面所有的 <code>childViewControllers</code> 和 <code>view</code> 里的 <code>subviews</code> , 一直递归下去就可以得到当前屏幕里所有视图对象了 , 同时可以通过 <code>runtime</code> 把它们的 <code>property</code>、<code>delegate</code> 都获取出来。  </p>
<p>结合 <code>Reveal</code> 或者 <code>Xcode</code> 自带的 <code>Captuer View Hiearachy</code> , 我们可以推测一下这两个的的实现原理了 :  </p>
<p>1、根据应用得到根视图<br>2、递归获取里面的所有控件<br>3、按照他们的层级关系一层一层的画出来</p>
<h3 id="动态修改控件"><a href="#动态修改控件" class="headerlink" title="动态修改控件"></a>动态修改控件</h3><p>1、把上面获取到的所有控件的详细信息上传到服务器 。<br>2、根据业务需求由服务器给我们下发对应的配置列表，以 <code>button</code> 为例 : 配置列表里必须要有 :    </p>
<blockquote>
<p>1)、<code>button</code> 的全路径 : 如 <code>UIWindow</code> -&gt; <code>UIWindow</code> -&gt; <code>UIView</code> -&gt; <code>UIView</code> -&gt; <code>UILayoutContainerView</code> -&gt; <code>UITabBar</code> -&gt; <code>UIView</code> —&gt; <code>UIButton</code>    </p>
<p>2)、<code>button</code> 的唯一标识 : 如 <code>tag</code> 值或自己实现的一套算法生成的唯一标识 , 目的是防止与 <code>button</code> 同一层次的视图搞混 。  </p>
<p>3)、 根据路径及唯一标识来匹配 <code>App</code> 里的控件 , 匹配和上面的查找原理是相通的。   </p>
<p>4)、 匹配成功代表  <code>button</code> 确实存在 , 根据业务需求做后续操作 。   </p>
<p>提示: 匹配策略尽可能的多 , 防止意外情况某一两个标识生成失败或者生成相同 。</p>
</blockquote>
<p>3、修改 <code>button</code> 的状态。</p>
<blockquote>
<p>1)、 如某个按钮点了会 <code>Crash</code> 或暂时不需要被点击 , 但是又要展示出来 , 可以直接修改 <code>button</code> 的 <code>enabled</code> 属性 。   </p>
<p>2)、 如某业务暂时关闭 , 可以直接修改入口 <code>按钮</code> frame为0 , 前提是要自动布局已做好 。    </p>
<p>3)、 如给购买 <code>按钮</code> 添加监听事件 <code>addTarget: action: forControlEvents:</code>     </p>
<p><code>target</code> 也可以通过上面 <code>遍历视图</code> 获取到 , <code>action</code> 可以由服务器下发 , 也可以一开始就写死 , 等有需求的时候直接传不同的参数就行了 。  </p>
</blockquote>
<p>4、 绑定查找控件时 , 这个界面必须要已经初始化完成了才行 , 假如界面还没生成肯定是查找不到这个控件的 。 这里给大家提供两种思路 : </p>
<blockquote>
<p>1、使用Runtime <code>Method Swizzing</code> ,  直接把修改控件的方法与 <code>didMoveToSuperview</code> 和 <code>didMoveToWindow</code> 动态绑定 , 等这个控件加载出来之后再去修改 , 查找路径正确的话肯定就能找到了 。   </p>
<p>2、在具体的类里面 , 等控件的初始化方法调用完后 , 再去执行动态修改 , 如在<code>viewDidLoad</code> 里面初始化控件 , 在 <code>viewWillAppear:</code> 里面动态修改 。  </p>
<p>建议使用第一种适用范围更强 。</p>
</blockquote>
<p>上架后的 <code>应用</code> 可能会遇到的一些突发状况 , 未测出的<code>Crash</code>、临时改点小需求 , 等等 , 我们总不能每次因为一点小改动就重新提交一次 <code>App Store</code> , 先不说 <code>App Store</code> 的审核时间 , 频繁的让用户去更新应用 , 用户也会烦的 。使用这篇文章所讲的来实现动态更新是再合适不过了 。   </p>
<p>首先上面讲的 <code>动态更新</code> 是完全脱离出来的一个模块 , 跟业务逻辑没有任何关系 , 只需要部署一次就行了 , 等开发下一个项目也可以直接拿过去使用 。这里的动态更新适用于局部的视图、控件的修改 , 如果你有其它需求可以考虑 <a href="https://github.com/bang590/JSPatch" target="_blank" rel="external">JSPatch</a> , 下发脚本也是一个不错的选择 。</p>
<h3 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h3><p>使用一些UI调试的辅助工具 , 使我们查看视图在项目中得层次结构更为方便 。<br>常用的UI调试的工具：</p>
<ul>
<li>Captuer View Hiearachy</li>
<li>Reveal</li>
</ul>
<p>Xcode自带的 <code>Captuer View Hiearachy</code> 实现步骤:  </p>
<ul>
<li>1、打开Xcode , 运行项目 , 选择最顶部的 <code>Debug</code></li>
<li>2、<code>Debug</code> -&gt; <code>View Debugging</code> -&gt; <code>Show View Frames</code></li>
<li>3、<code>Debug</code> -&gt; <code>View Debugging</code> -&gt; <code>Captuer View Hiearachy</code></li>
</ul>
<p>Xcode里面就变成了三维的视图了 , Xcode左侧展示出来的是层级关系的树状图 。</p>
<p>Reveal的功能相对来说更强大 , 适用于UI调试视图查找 。使用方法请看 <a href="http://support.revealapp.com/kb/getting-started/reveal" target="_blank" rel="external">Reveal集成指南</a> 。</p>
<p><br></p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2016/01/09/2016-01-09-iOS_OTA/" target="_blank" rel="external">点击阅读原文</a>     </p>
]]></content>
    
    <summary type="html">
    
      iOS 使用Runtime 实现动态更新
    
    </summary>
    
    
      <category term="iOS" scheme="//xiaoshenmao.github.io/blog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 9 变化笔记</title>
    <link href="//xiaoshenmao.github.io/blog/2015/09/26/2015-09-26-iOS9_Note/"/>
    <id>//xiaoshenmao.github.io/blog/2015/09/26/2015-09-26-iOS9_Note/</id>
    <published>2015-09-26T10:15:06.000Z</published>
    <updated>2017-08-27T07:19:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里将介绍下我们日常开发一些从iOS8过度到iOS9给我们带来的一些变化，及解决方法。</p>
<h3 id="App-Transport-Security"><a href="#App-Transport-Security" class="headerlink" title="App Transport Security"></a>App Transport Security</h3><p>iOS9和OS X El Capitan的一个新特性，App Transport Security 的目地是提高Apple 操作系统的安全性以及在此操作系统上运行的任何应用的安全性。ATS是苹果针对与 NSURL这一层做的封装，iOS9后ATS默认是开启的，即网络传输需要使用HTTPS。如果想在iOS9后继续使用HTTP的话，有两条路可以走：</p>
<blockquote>
<ol>
<li>在Info.plist中添加 <code>NSAppTransportSecurity</code>类型Dictionary，在<code>NSAppTransportSecurity</code>下添加<code>NSAllowsArbitraryLoads</code>，Boolean 为 YES。</li>
<li>直接使用CFNetwork做网络请求，ASIHTTPRequest就是基于CFNetwotk做的封装，如果有需求的同学可以看看ASI里面的源码，如果某个时间段你又想要使用HTTPS的话，ASI对SSL/TSL的证书验证有点问题，证书验证还得自己封装一下才行。刚才我说道，ATS是苹果针对与NSURL这一层做的封装，所以我们使用CFNetwork或者更底层做网络请求的话是不受ATS限制的。</li>
</ol>
</blockquote>
<a id="more"></a> 
<h3 id="移除了discoveryd-DNS解析服务"><a href="#移除了discoveryd-DNS解析服务" class="headerlink" title="移除了discoveryd DNS解析服务"></a>移除了discoveryd DNS解析服务</h3><p>iPhone升级到iOS8后WiFi有时候会有问题，特别是Mac升级到OS X Yosemite后，时而电脑休眠唤醒唬就连不上WiFi，有时候还突然掉线，经常要手动去关闭WiFi在重新连接，这是因为苹果到了OS X Yosemite系统后，把之前的mDNSResponder换成了discoveryd DNS。iOS9和OS X Yosemite10.4后mDNSResponder又回来了。</p>
<p>mDNSResponder： 苹果以前一直使用控制DNS和Bonjour服务的一种进程。<br>discoveryd：OS X Yosemite后苹果新出的一种进程。</p>
<h3 id="App-Thinning"><a href="#App-Thinning" class="headerlink" title="App Thinning"></a>App Thinning</h3><p>App Thinning是一个关于节省iOS设备存储空间的功能，它可以让iOS设备在安装、更新及运行App等场景中仅下载所需的资源，减少App的占用空间，从而节省设备的存储空间。</p>
<h4 id="App-Thinning主要有三个机制："><a href="#App-Thinning主要有三个机制：" class="headerlink" title="App Thinning主要有三个机制："></a>App Thinning主要有三个机制：</h4><blockquote>
<ol>
<li>Slicing： 开发者把App安装包上传到AppStore后，Apple服务会自动对安装包切割为不同的应用变体(App variant)， 当用户下载安装包时，系统会根据设备型号下载安装对应的单个应用变体。</li>
<li>On-Demand Resources： ORD(随需资源)是指开发者对资源添加标签上传后，系统会根据App运行的情况，动态下载并加载所需资源，而在存储空间不足时，自动删除这类资源。</li>
<li>Bitcode：开启Bitcode编译后，可以使得开发者上传App时只需上传Intermediate Representation(中间件)，而非最终的可执行二进制文件。 在用户下载App之前，AppStore会自动编译中间件，产生设备所需的执行文件供用户下载安装。</li>
</ol>
</blockquote>
<p>其中，Bitcode的机制可以支持动态的进行App Slicing，而对于Apple未来进行硬件升级的措施，此机制可以保证在开发者不重新发布版本的情况下而兼容新的设备。Xcode7默认是开始了Bitcode，如果不想使用可以手动关闭Bitcode：</p>
<ul>
<li>选择项目——&gt;点击Target——&gt;点击Build Setttings——&gt;搜索栏里搜bitcode——&gt;把Enable Bitcode对应的Yes改成No。</li>
</ul>
<p>启用Bitcode编译机制，需要注意以下几点：</p>
<ol>
<li>如果应用开启Bitcode，那么其集成的其他第三方库也需要是Bitcode编译的包才能真正进行Bitcode编译</li>
<li>开启Bitcode编译后，编译产生的.app体积会变大(中间代码，不是用户下载的包)，且.dSYM文件不能用来崩溃日志的符号化（用户下载的包是Apple服务重新编译产生的，有产生新的符号文件），使用dSYM来收集Crash日志的同学得注意了。</li>
<li>通过Archive方式上传AppStore的包，可以在Xcode的Organizer工具中下载对应安装包的新的符号文件</li>
</ol>
<h3 id="后台定位"><a href="#后台定位" class="headerlink" title="后台定位"></a>后台定位</h3><p>iOS9后苹果为了对保障用户的地理位置的隐私对App请求后台定位有了权限设置，则需要多加一些代码。如果不适配iOS9，就不能偷偷在后台定位，如果没有后台定位的权限也是可以在后台定位的，只是会出现蓝条。</p>
<p>开启后台定位功能：<code>locationManager.allowsBackgroundLocationUpdates = YES;</code><br>locationManager是CLLocationManager的对象，用来管理整个定位的。</p>
<p><strong>重点：</strong></p>
<blockquote>
<p>配置info.plist，添加一个Required background modes，Array类型的，然后在Required background modes里面Item 0对应的Value设置为App registers for location updates，这样就解决了iOS9后台定位出现蓝条的问题了。</p>
</blockquote>
<h3 id="UI-Testing"><a href="#UI-Testing" class="headerlink" title="UI Testing"></a>UI Testing</h3><p>Xcode7中苹果引入了一种新的方式在应用中进行测试——UI Testting，UI Testting允许我们找到UI元素与之交互，还能检查属性和状态。UI Testting已经完全集成进了Xcode7的测试报告，可以和单元测试一起执行。使用起来跟之前Xcode5出来的XCTest差不多，Xcode bots提供对此的支持，而且command line支持当UI测试失败时会立即发出通知。</p>
<p>可以参考Github上的Demo，步骤：</p>
<ol>
<li>在DemoTests.m里创建一个test开头的方法</li>
<li>在setUp()里启动应用 <code>XCUIApplication().launch()</code></li>
<li>新建一个方法test开头的，在里面获取应用<code>let app = XCUIApplication()</code></li>
<li>的到<code>let app = XCUIApplication()</code>，a<code>pp.buttons[“View Detail”].tap()?</code>。buttons是当前这个界面的所有按钮的集合，[]里面写按钮的名字，tap()就是执行这个按钮所对应的方法，可以是网络请求、界面跳转等等。</li>
</ol>
<h3 id="URL-scheme"><a href="#URL-scheme" class="headerlink" title="URL scheme"></a>URL scheme</h3><p>在iOS9中，如果使用URL scheme必须在”Info.plist”中将你要在外部调用的URL scheme列为白名单，否则不能使用。</p>
<p>配置info.plist，添加一个<code>LSApplicationQueriesSchemes</code>，Array类型的，然后在<code>LSApplicationQueriesSchemes</code>的Item里面添加urlscheme就行了，urlscheme是任意一个字符串，就是你自己需要使用的urlscheme，iOS9 URL scheme白名单适配就完成了。</p>
<h3 id="出现大量的警告"><a href="#出现大量的警告" class="headerlink" title="出现大量的警告"></a>出现大量的警告</h3><p>Xcode7后运行以前的项目后出现大量的警告如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(null): warning: /var/folders/p4/z7zy68r92hd3p5ry5g2v3k_8rlwzzr/C/org.llvm.clang.dalmo/ModuleCache/1TXZDLI9N2EMV/Foundation-3DFYNEBRQSXST.pcm: No such file or directory。</div></pre></td></tr></table></figure>
<p>作为一个有洁癖的我反正是不能忍，出现警告的大致原因跟我上面提到的开启Bitcode，.dSYM文件不能用来符号化有关，Xcode试图去创建dSYM文件，但是你又不需要。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li>Build Settings ——&gt;Build Options——&gt;Debug Information Format</li>
<li>Debug下的DWARF with dsYM File改成DWARF</li>
<li>Release下的还是之前默认的DWARF with dsYM File不变</li>
</ol>
<p>参考资料：</p>
<ul>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips" target="_blank" rel="external">iOS9AdaptationTips</a> </li>
<li><a href="http://www.cocoachina.com/ios/20150821/13140.html" target="_blank" rel="external">iOS9学习系列</a> </li>
<li><a href="https://github.com/shinobicontrols/iOS9-day-by-day" target="_blank" rel="external">iOS9-day-by-day</a></li>
</ul>
<p><br></p>
<p>转载请注明：<a href="http://xiaoshenmao.github.io/blog" target="_blank" rel="external">xiaoshenmao的博客</a> » <a href="https://xiaoshenmao.github.io/blog/2015/09/26/2015-09-26-iOS9_Note/" target="_blank" rel="external">点击阅读原文</a></p>
]]></content>
    
    <summary type="html">
    
      iOS9 变化笔记, 以及工作中常遇到的问题
    
    </summary>
    
    
      <category term="iOS" scheme="//xiaoshenmao.github.io/blog/tags/iOS/"/>
    
  </entry>
  
</feed>
